//
// Copyrights (c) 2015, 2016, Juniper Networks, Inc.
// All rights reserved.
//

//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

//
// This file defines the top level message used for all Juniper
// Telemetry packets encoded to the protocol buffer format.
// The top level message is TelemetryStream.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.7
// source: telemetry_top.proto

package jti

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TelemetryFieldOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsKey       *bool `protobuf:"varint,1,opt,name=is_key,json=isKey" json:"is_key,omitempty"`
	IsTimestamp *bool `protobuf:"varint,2,opt,name=is_timestamp,json=isTimestamp" json:"is_timestamp,omitempty"`
	IsCounter   *bool `protobuf:"varint,3,opt,name=is_counter,json=isCounter" json:"is_counter,omitempty"`
	IsGauge     *bool `protobuf:"varint,4,opt,name=is_gauge,json=isGauge" json:"is_gauge,omitempty"`
}

func (x *TelemetryFieldOptions) Reset() {
	*x = TelemetryFieldOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_top_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryFieldOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryFieldOptions) ProtoMessage() {}

func (x *TelemetryFieldOptions) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_top_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryFieldOptions.ProtoReflect.Descriptor instead.
func (*TelemetryFieldOptions) Descriptor() ([]byte, []int) {
	return file_telemetry_top_proto_rawDescGZIP(), []int{0}
}

func (x *TelemetryFieldOptions) GetIsKey() bool {
	if x != nil && x.IsKey != nil {
		return *x.IsKey
	}
	return false
}

func (x *TelemetryFieldOptions) GetIsTimestamp() bool {
	if x != nil && x.IsTimestamp != nil {
		return *x.IsTimestamp
	}
	return false
}

func (x *TelemetryFieldOptions) GetIsCounter() bool {
	if x != nil && x.IsCounter != nil {
		return *x.IsCounter
	}
	return false
}

func (x *TelemetryFieldOptions) GetIsGauge() bool {
	if x != nil && x.IsGauge != nil {
		return *x.IsGauge
	}
	return false
}

type TelemetryStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// router hostname
	// (or, just in the case of legacy (microkernel) PFEs, the IP address)
	SystemId *string `protobuf:"bytes,1,req,name=system_id,json=systemId" json:"system_id,omitempty"`
	// line card / RE (slot number). For RE, it will be 65535
	ComponentId *uint32 `protobuf:"varint,2,opt,name=component_id,json=componentId" json:"component_id,omitempty"`
	// PFE (if applicable)
	SubComponentId *uint32 `protobuf:"varint,3,opt,name=sub_component_id,json=subComponentId" json:"sub_component_id,omitempty"`
	// Overload sensor name with "senor name, internal path, external path
	// and component" seperated by ":". For RE sensors, component will be
	// daemon-name and for PFE sensors it will be "PFE".
	SensorName *string `protobuf:"bytes,4,opt,name=sensor_name,json=sensorName" json:"sensor_name,omitempty"`
	// sequence number, monotonically increasing for each
	// system_id, component_id, sub_component_id + sensor_name.
	SequenceNumber *uint32 `protobuf:"varint,5,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	// timestamp (milliseconds since 00:00:00 UTC 1/1/1970)
	Timestamp *uint64 `protobuf:"varint,6,opt,name=timestamp" json:"timestamp,omitempty"`
	// major version
	VersionMajor *uint32 `protobuf:"varint,7,opt,name=version_major,json=versionMajor" json:"version_major,omitempty"`
	// minor version
	VersionMinor *uint32 `protobuf:"varint,8,opt,name=version_minor,json=versionMinor" json:"version_minor,omitempty"`
	// end-of-message marker, set to true when the end of wrap is reached
	Eom        *bool              `protobuf:"varint,9,opt,name=eom" json:"eom,omitempty"`
	Ietf       *IETFSensors       `protobuf:"bytes,100,opt,name=ietf" json:"ietf,omitempty"`
	Enterprise *EnterpriseSensors `protobuf:"bytes,101,opt,name=enterprise" json:"enterprise,omitempty"`
}

func (x *TelemetryStream) Reset() {
	*x = TelemetryStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_top_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryStream) ProtoMessage() {}

func (x *TelemetryStream) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_top_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryStream.ProtoReflect.Descriptor instead.
func (*TelemetryStream) Descriptor() ([]byte, []int) {
	return file_telemetry_top_proto_rawDescGZIP(), []int{1}
}

func (x *TelemetryStream) GetSystemId() string {
	if x != nil && x.SystemId != nil {
		return *x.SystemId
	}
	return ""
}

func (x *TelemetryStream) GetComponentId() uint32 {
	if x != nil && x.ComponentId != nil {
		return *x.ComponentId
	}
	return 0
}

func (x *TelemetryStream) GetSubComponentId() uint32 {
	if x != nil && x.SubComponentId != nil {
		return *x.SubComponentId
	}
	return 0
}

func (x *TelemetryStream) GetSensorName() string {
	if x != nil && x.SensorName != nil {
		return *x.SensorName
	}
	return ""
}

func (x *TelemetryStream) GetSequenceNumber() uint32 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

func (x *TelemetryStream) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *TelemetryStream) GetVersionMajor() uint32 {
	if x != nil && x.VersionMajor != nil {
		return *x.VersionMajor
	}
	return 0
}

func (x *TelemetryStream) GetVersionMinor() uint32 {
	if x != nil && x.VersionMinor != nil {
		return *x.VersionMinor
	}
	return 0
}

func (x *TelemetryStream) GetEom() bool {
	if x != nil && x.Eom != nil {
		return *x.Eom
	}
	return false
}

func (x *TelemetryStream) GetIetf() *IETFSensors {
	if x != nil {
		return x.Ietf
	}
	return nil
}

func (x *TelemetryStream) GetEnterprise() *EnterpriseSensors {
	if x != nil {
		return x.Enterprise
	}
	return nil
}

type IETFSensors struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields
}

func (x *IETFSensors) Reset() {
	*x = IETFSensors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_top_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IETFSensors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IETFSensors) ProtoMessage() {}

func (x *IETFSensors) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_top_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IETFSensors.ProtoReflect.Descriptor instead.
func (*IETFSensors) Descriptor() ([]byte, []int) {
	return file_telemetry_top_proto_rawDescGZIP(), []int{2}
}

var extRange_IETFSensors = []protoiface.ExtensionRangeV1{
	{Start: 1, End: 536870911},
}

// Deprecated: Use IETFSensors.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*IETFSensors) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_IETFSensors
}

type EnterpriseSensors struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields
}

func (x *EnterpriseSensors) Reset() {
	*x = EnterpriseSensors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_top_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseSensors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseSensors) ProtoMessage() {}

func (x *EnterpriseSensors) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_top_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseSensors.ProtoReflect.Descriptor instead.
func (*EnterpriseSensors) Descriptor() ([]byte, []int) {
	return file_telemetry_top_proto_rawDescGZIP(), []int{3}
}

var extRange_EnterpriseSensors = []protoiface.ExtensionRangeV1{
	{Start: 1, End: 536870911},
}

// Deprecated: Use EnterpriseSensors.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*EnterpriseSensors) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_EnterpriseSensors
}

type JuniperNetworksSensors struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields
}

func (x *JuniperNetworksSensors) Reset() {
	*x = JuniperNetworksSensors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_top_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JuniperNetworksSensors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JuniperNetworksSensors) ProtoMessage() {}

func (x *JuniperNetworksSensors) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_top_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JuniperNetworksSensors.ProtoReflect.Descriptor instead.
func (*JuniperNetworksSensors) Descriptor() ([]byte, []int) {
	return file_telemetry_top_proto_rawDescGZIP(), []int{4}
}

var extRange_JuniperNetworksSensors = []protoiface.ExtensionRangeV1{
	{Start: 1, End: 536870911},
}

// Deprecated: Use JuniperNetworksSensors.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*JuniperNetworksSensors) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_JuniperNetworksSensors
}

var file_telemetry_top_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*TelemetryFieldOptions)(nil),
		Field:         1024,
		Name:          "telemetry_options",
		Tag:           "bytes,1024,opt,name=telemetry_options",
		Filename:      "telemetry_top.proto",
	},
	{
		ExtendedType:  (*EnterpriseSensors)(nil),
		ExtensionType: (*JuniperNetworksSensors)(nil),
		Field:         2636,
		Name:          "juniperNetworks",
		Tag:           "bytes,2636,opt,name=juniperNetworks",
		Filename:      "telemetry_top.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional TelemetryFieldOptions telemetry_options = 1024;
	E_TelemetryOptions = &file_telemetry_top_proto_extTypes[0]
)

// Extension fields to EnterpriseSensors.
var (
	// re-use IANA assigned numbers
	//
	// optional JuniperNetworksSensors juniperNetworks = 2636;
	E_JuniperNetworks = &file_telemetry_top_proto_extTypes[1]
)

var File_telemetry_top_proto protoreflect.FileDescriptor

var file_telemetry_top_proto_rawDesc = []byte{
	0x0a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x01, 0x0a, 0x15, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x67, 0x61, 0x75, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x47, 0x61, 0x75, 0x67, 0x65, 0x22, 0xb8, 0x03, 0x0a, 0x0f, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x09, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x08, 0x01, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82,
	0x40, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x10, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23,
	0x0a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x6a, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x69, 0x6e, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6f, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x65, 0x6f, 0x6d, 0x12, 0x20, 0x0a, 0x04, 0x69, 0x65,
	0x74, 0x66, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x49, 0x45, 0x54, 0x46, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x04, 0x69, 0x65, 0x74, 0x66, 0x12, 0x32, 0x0a, 0x0a,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x22, 0x17, 0x0a, 0x0b, 0x49, 0x45, 0x54, 0x46, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2a,
	0x08, 0x08, 0x01, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x1d, 0x0a, 0x11, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2a, 0x08,
	0x08, 0x01, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x22, 0x0a, 0x16, 0x4a, 0x75, 0x6e, 0x69,
	0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x73, 0x2a, 0x08, 0x08, 0x01, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x3a, 0x63, 0x0a, 0x11,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x80, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x10, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x3a, 0x56, 0x0a, 0x0f, 0x6a, 0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x12, 0x12, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0xcc, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x0f, 0x6a, 0x75, 0x6e, 0x69, 0x70, 0x65,
	0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2e, 0x2f,
	0x6a, 0x74, 0x69,
}

var (
	file_telemetry_top_proto_rawDescOnce sync.Once
	file_telemetry_top_proto_rawDescData = file_telemetry_top_proto_rawDesc
)

func file_telemetry_top_proto_rawDescGZIP() []byte {
	file_telemetry_top_proto_rawDescOnce.Do(func() {
		file_telemetry_top_proto_rawDescData = protoimpl.X.CompressGZIP(file_telemetry_top_proto_rawDescData)
	})
	return file_telemetry_top_proto_rawDescData
}

var file_telemetry_top_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_telemetry_top_proto_goTypes = []interface{}{
	(*TelemetryFieldOptions)(nil),     // 0: TelemetryFieldOptions
	(*TelemetryStream)(nil),           // 1: TelemetryStream
	(*IETFSensors)(nil),               // 2: IETFSensors
	(*EnterpriseSensors)(nil),         // 3: EnterpriseSensors
	(*JuniperNetworksSensors)(nil),    // 4: JuniperNetworksSensors
	(*descriptorpb.FieldOptions)(nil), // 5: google.protobuf.FieldOptions
}
var file_telemetry_top_proto_depIdxs = []int32{
	2, // 0: TelemetryStream.ietf:type_name -> IETFSensors
	3, // 1: TelemetryStream.enterprise:type_name -> EnterpriseSensors
	5, // 2: telemetry_options:extendee -> google.protobuf.FieldOptions
	3, // 3: juniperNetworks:extendee -> EnterpriseSensors
	0, // 4: telemetry_options:type_name -> TelemetryFieldOptions
	4, // 5: juniperNetworks:type_name -> JuniperNetworksSensors
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	4, // [4:6] is the sub-list for extension type_name
	2, // [2:4] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_telemetry_top_proto_init() }
func file_telemetry_top_proto_init() {
	if File_telemetry_top_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_telemetry_top_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryFieldOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_top_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_top_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IETFSensors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_telemetry_top_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseSensors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_telemetry_top_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JuniperNetworksSensors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_telemetry_top_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 2,
			NumServices:   0,
		},
		GoTypes:           file_telemetry_top_proto_goTypes,
		DependencyIndexes: file_telemetry_top_proto_depIdxs,
		MessageInfos:      file_telemetry_top_proto_msgTypes,
		ExtensionInfos:    file_telemetry_top_proto_extTypes,
	}.Build()
	File_telemetry_top_proto = out.File
	file_telemetry_top_proto_rawDesc = nil
	file_telemetry_top_proto_goTypes = nil
	file_telemetry_top_proto_depIdxs = nil
}
