// Copyright (c) 2015, 2021 Juniper Networks, Inc.
// All rights reserved.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

//
// Version 1.1
//

//
// Nitin Kumar, 2015-05-29
//
// This file defines the messages in Protocol Buffers used by
// the interface sensor. The top-level message is LogicalPort.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: logical_port.proto

package jti

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Top-level message
type LogicalPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceInfo []*LogicalInterfaceInfo `protobuf:"bytes,1,rep,name=interface_info,json=interfaceInfo" json:"interface_info,omitempty"`
}

func (x *LogicalPort) Reset() {
	*x = LogicalPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logical_port_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalPort) ProtoMessage() {}

func (x *LogicalPort) ProtoReflect() protoreflect.Message {
	mi := &file_logical_port_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalPort.ProtoReflect.Descriptor instead.
func (*LogicalPort) Descriptor() ([]byte, []int) {
	return file_logical_port_proto_rawDescGZIP(), []int{0}
}

func (x *LogicalPort) GetInterfaceInfo() []*LogicalInterfaceInfo {
	if x != nil {
		return x.InterfaceInfo
	}
	return nil
}

// Logical Interaface information
type LogicalInterfaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical interface name (e.g. xe-0/0/0.0)
	IfName *string `protobuf:"bytes,1,req,name=if_name,json=ifName" json:"if_name,omitempty"`
	// Time reset
	InitTime *uint64 `protobuf:"varint,2,req,name=init_time,json=initTime" json:"init_time,omitempty"`
	// Global Index
	SnmpIfIndex *uint32 `protobuf:"varint,3,opt,name=snmp_if_index,json=snmpIfIndex" json:"snmp_if_index,omitempty"`
	// Name of the aggregate bundle
	ParentAeName *string `protobuf:"bytes,4,opt,name=parent_ae_name,json=parentAeName" json:"parent_ae_name,omitempty"`
	// Inbound traffic statistics
	IngressStats *IngressInterfaceStats `protobuf:"bytes,5,opt,name=ingress_stats,json=ingressStats" json:"ingress_stats,omitempty"`
	// Outbound traffic statistics
	EgressStats *EgressInterfaceStats `protobuf:"bytes,6,opt,name=egress_stats,json=egressStats" json:"egress_stats,omitempty"`
	// Link state UP\DOWN etc.
	OpState *OperationalState `protobuf:"bytes,7,opt,name=op_state,json=opState" json:"op_state,omitempty"`
	// administrative status, i.e.. enabled/disabled
	AdministractiveStatus *string `protobuf:"bytes,8,opt,name=administractive_status,json=administractiveStatus" json:"administractive_status,omitempty"`
	// Description of the interface
	Description *string `protobuf:"bytes,9,opt,name=description" json:"description,omitempty"`
	// This corresponds to the ifLastChange object in the standard interface MIB
	LastChange *uint32 `protobuf:"varint,10,opt,name=last_change,json=lastChange" json:"last_change,omitempty"`
	// This corresponds to the ifHighSpeed object in the standard interface MIB
	HighSpeed *uint32 `protobuf:"varint,11,opt,name=high_speed,json=highSpeed" json:"high_speed,omitempty"`
	// Ingress queue information
	IngressQueueInfo []*LogicalInterfaceQueueStats `protobuf:"bytes,12,rep,name=ingress_queue_info,json=ingressQueueInfo" json:"ingress_queue_info,omitempty"`
	// Egress queue information
	EgressQueueInfo []*LogicalInterfaceQueueStats `protobuf:"bytes,13,rep,name=egress_queue_info,json=egressQueueInfo" json:"egress_queue_info,omitempty"`
}

func (x *LogicalInterfaceInfo) Reset() {
	*x = LogicalInterfaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logical_port_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalInterfaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalInterfaceInfo) ProtoMessage() {}

func (x *LogicalInterfaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_logical_port_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalInterfaceInfo.ProtoReflect.Descriptor instead.
func (*LogicalInterfaceInfo) Descriptor() ([]byte, []int) {
	return file_logical_port_proto_rawDescGZIP(), []int{1}
}

func (x *LogicalInterfaceInfo) GetIfName() string {
	if x != nil && x.IfName != nil {
		return *x.IfName
	}
	return ""
}

func (x *LogicalInterfaceInfo) GetInitTime() uint64 {
	if x != nil && x.InitTime != nil {
		return *x.InitTime
	}
	return 0
}

func (x *LogicalInterfaceInfo) GetSnmpIfIndex() uint32 {
	if x != nil && x.SnmpIfIndex != nil {
		return *x.SnmpIfIndex
	}
	return 0
}

func (x *LogicalInterfaceInfo) GetParentAeName() string {
	if x != nil && x.ParentAeName != nil {
		return *x.ParentAeName
	}
	return ""
}

func (x *LogicalInterfaceInfo) GetIngressStats() *IngressInterfaceStats {
	if x != nil {
		return x.IngressStats
	}
	return nil
}

func (x *LogicalInterfaceInfo) GetEgressStats() *EgressInterfaceStats {
	if x != nil {
		return x.EgressStats
	}
	return nil
}

func (x *LogicalInterfaceInfo) GetOpState() *OperationalState {
	if x != nil {
		return x.OpState
	}
	return nil
}

func (x *LogicalInterfaceInfo) GetAdministractiveStatus() string {
	if x != nil && x.AdministractiveStatus != nil {
		return *x.AdministractiveStatus
	}
	return ""
}

func (x *LogicalInterfaceInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *LogicalInterfaceInfo) GetLastChange() uint32 {
	if x != nil && x.LastChange != nil {
		return *x.LastChange
	}
	return 0
}

func (x *LogicalInterfaceInfo) GetHighSpeed() uint32 {
	if x != nil && x.HighSpeed != nil {
		return *x.HighSpeed
	}
	return 0
}

func (x *LogicalInterfaceInfo) GetIngressQueueInfo() []*LogicalInterfaceQueueStats {
	if x != nil {
		return x.IngressQueueInfo
	}
	return nil
}

func (x *LogicalInterfaceInfo) GetEgressQueueInfo() []*LogicalInterfaceQueueStats {
	if x != nil {
		return x.EgressQueueInfo
	}
	return nil
}

// Interface inbound/Ingress traffic statistics
type IngressInterfaceStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Count of packets
	IfPackets *uint64 `protobuf:"varint,1,req,name=if_packets,json=ifPackets" json:"if_packets,omitempty"`
	// Count of bytes
	IfOctets *uint64 `protobuf:"varint,2,req,name=if_octets,json=ifOctets" json:"if_octets,omitempty"`
	// Count of unicast packets
	IfUcastPackets *uint64 `protobuf:"varint,3,opt,name=if_ucast_packets,json=ifUcastPackets" json:"if_ucast_packets,omitempty"`
	// Count of multicast packets
	IfMcastPackets *uint64                      `protobuf:"varint,4,opt,name=if_mcast_packets,json=ifMcastPackets" json:"if_mcast_packets,omitempty"`
	IfFcStats      []*ForwardingClassAccounting `protobuf:"bytes,5,rep,name=if_fc_stats,json=ifFcStats" json:"if_fc_stats,omitempty"`
	IfFaStats      []*FamilyAccounting          `protobuf:"bytes,6,rep,name=if_fa_stats,json=ifFaStats" json:"if_fa_stats,omitempty"`
}

func (x *IngressInterfaceStats) Reset() {
	*x = IngressInterfaceStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logical_port_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressInterfaceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressInterfaceStats) ProtoMessage() {}

func (x *IngressInterfaceStats) ProtoReflect() protoreflect.Message {
	mi := &file_logical_port_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressInterfaceStats.ProtoReflect.Descriptor instead.
func (*IngressInterfaceStats) Descriptor() ([]byte, []int) {
	return file_logical_port_proto_rawDescGZIP(), []int{2}
}

func (x *IngressInterfaceStats) GetIfPackets() uint64 {
	if x != nil && x.IfPackets != nil {
		return *x.IfPackets
	}
	return 0
}

func (x *IngressInterfaceStats) GetIfOctets() uint64 {
	if x != nil && x.IfOctets != nil {
		return *x.IfOctets
	}
	return 0
}

func (x *IngressInterfaceStats) GetIfUcastPackets() uint64 {
	if x != nil && x.IfUcastPackets != nil {
		return *x.IfUcastPackets
	}
	return 0
}

func (x *IngressInterfaceStats) GetIfMcastPackets() uint64 {
	if x != nil && x.IfMcastPackets != nil {
		return *x.IfMcastPackets
	}
	return 0
}

func (x *IngressInterfaceStats) GetIfFcStats() []*ForwardingClassAccounting {
	if x != nil {
		return x.IfFcStats
	}
	return nil
}

func (x *IngressInterfaceStats) GetIfFaStats() []*FamilyAccounting {
	if x != nil {
		return x.IfFaStats
	}
	return nil
}

// Interface outbound/Egress traffic statistics
type EgressInterfaceStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Count of packets
	IfPackets *uint64 `protobuf:"varint,1,req,name=if_packets,json=ifPackets" json:"if_packets,omitempty"`
	// Count of bytes
	IfOctets *uint64 `protobuf:"varint,2,req,name=if_octets,json=ifOctets" json:"if_octets,omitempty"`
	// Count of unicast packets
	IfUcastPackets *uint64 `protobuf:"varint,3,opt,name=if_ucast_packets,json=ifUcastPackets" json:"if_ucast_packets,omitempty"`
	// Count of multicast packets
	IfMcastPackets *uint64             `protobuf:"varint,4,opt,name=if_mcast_packets,json=ifMcastPackets" json:"if_mcast_packets,omitempty"`
	IfFaStats      []*FamilyAccounting `protobuf:"bytes,5,rep,name=if_fa_stats,json=ifFaStats" json:"if_fa_stats,omitempty"`
}

func (x *EgressInterfaceStats) Reset() {
	*x = EgressInterfaceStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logical_port_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgressInterfaceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgressInterfaceStats) ProtoMessage() {}

func (x *EgressInterfaceStats) ProtoReflect() protoreflect.Message {
	mi := &file_logical_port_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgressInterfaceStats.ProtoReflect.Descriptor instead.
func (*EgressInterfaceStats) Descriptor() ([]byte, []int) {
	return file_logical_port_proto_rawDescGZIP(), []int{3}
}

func (x *EgressInterfaceStats) GetIfPackets() uint64 {
	if x != nil && x.IfPackets != nil {
		return *x.IfPackets
	}
	return 0
}

func (x *EgressInterfaceStats) GetIfOctets() uint64 {
	if x != nil && x.IfOctets != nil {
		return *x.IfOctets
	}
	return 0
}

func (x *EgressInterfaceStats) GetIfUcastPackets() uint64 {
	if x != nil && x.IfUcastPackets != nil {
		return *x.IfUcastPackets
	}
	return 0
}

func (x *EgressInterfaceStats) GetIfMcastPackets() uint64 {
	if x != nil && x.IfMcastPackets != nil {
		return *x.IfMcastPackets
	}
	return 0
}

func (x *EgressInterfaceStats) GetIfFaStats() []*FamilyAccounting {
	if x != nil {
		return x.IfFaStats
	}
	return nil
}

// Interface operational State details
type OperationalState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If the link is up/down
	OperationalStatus *string `protobuf:"bytes,1,opt,name=operational_status,json=operationalStatus" json:"operational_status,omitempty"`
}

func (x *OperationalState) Reset() {
	*x = OperationalState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logical_port_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationalState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationalState) ProtoMessage() {}

func (x *OperationalState) ProtoReflect() protoreflect.Message {
	mi := &file_logical_port_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationalState.ProtoReflect.Descriptor instead.
func (*OperationalState) Descriptor() ([]byte, []int) {
	return file_logical_port_proto_rawDescGZIP(), []int{4}
}

func (x *OperationalState) GetOperationalStatus() string {
	if x != nil && x.OperationalStatus != nil {
		return *x.OperationalStatus
	}
	return ""
}

// Interface forwarding class accounting
type ForwardingClassAccounting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface protocol
	IfFamily *string `protobuf:"bytes,1,opt,name=if_family,json=ifFamily" json:"if_family,omitempty"`
	// Forwarding class number
	FcNumber *uint32 `protobuf:"varint,2,opt,name=fc_number,json=fcNumber" json:"fc_number,omitempty"`
	// Count of packets
	IfPackets *uint64 `protobuf:"varint,3,opt,name=if_packets,json=ifPackets" json:"if_packets,omitempty"`
	// Count of bytes
	IfOctets *uint64 `protobuf:"varint,4,opt,name=if_octets,json=ifOctets" json:"if_octets,omitempty"`
}

func (x *ForwardingClassAccounting) Reset() {
	*x = ForwardingClassAccounting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logical_port_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardingClassAccounting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardingClassAccounting) ProtoMessage() {}

func (x *ForwardingClassAccounting) ProtoReflect() protoreflect.Message {
	mi := &file_logical_port_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardingClassAccounting.ProtoReflect.Descriptor instead.
func (*ForwardingClassAccounting) Descriptor() ([]byte, []int) {
	return file_logical_port_proto_rawDescGZIP(), []int{5}
}

func (x *ForwardingClassAccounting) GetIfFamily() string {
	if x != nil && x.IfFamily != nil {
		return *x.IfFamily
	}
	return ""
}

func (x *ForwardingClassAccounting) GetFcNumber() uint32 {
	if x != nil && x.FcNumber != nil {
		return *x.FcNumber
	}
	return 0
}

func (x *ForwardingClassAccounting) GetIfPackets() uint64 {
	if x != nil && x.IfPackets != nil {
		return *x.IfPackets
	}
	return 0
}

func (x *ForwardingClassAccounting) GetIfOctets() uint64 {
	if x != nil && x.IfOctets != nil {
		return *x.IfOctets
	}
	return 0
}

// logical Interface family stats accounting
type FamilyAccounting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface protocol
	IfFamily *string `protobuf:"bytes,1,opt,name=if_family,json=ifFamily" json:"if_family,omitempty"`
	// Count of packets
	IfPackets *uint64 `protobuf:"varint,2,opt,name=if_packets,json=ifPackets" json:"if_packets,omitempty"`
	// Count of v4 bytes
	IfOctets *uint64 `protobuf:"varint,3,opt,name=if_octets,json=ifOctets" json:"if_octets,omitempty"`
	// Count of v6 packets
	IfV6Packets *uint64 `protobuf:"varint,4,opt,name=if_v6_packets,json=ifV6Packets" json:"if_v6_packets,omitempty"`
	// Count of v6 bytes
	IfV6Octets *uint64 `protobuf:"varint,5,opt,name=if_v6_octets,json=ifV6Octets" json:"if_v6_octets,omitempty"`
	// Count of multicast packets
	IfMcastPackets *uint64 `protobuf:"varint,6,opt,name=if_mcast_packets,json=ifMcastPackets" json:"if_mcast_packets,omitempty"`
	// Count of multicast bytes
	IfMcastOctets *uint64 `protobuf:"varint,7,opt,name=if_mcast_octets,json=ifMcastOctets" json:"if_mcast_octets,omitempty"`
}

func (x *FamilyAccounting) Reset() {
	*x = FamilyAccounting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logical_port_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyAccounting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyAccounting) ProtoMessage() {}

func (x *FamilyAccounting) ProtoReflect() protoreflect.Message {
	mi := &file_logical_port_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyAccounting.ProtoReflect.Descriptor instead.
func (*FamilyAccounting) Descriptor() ([]byte, []int) {
	return file_logical_port_proto_rawDescGZIP(), []int{6}
}

func (x *FamilyAccounting) GetIfFamily() string {
	if x != nil && x.IfFamily != nil {
		return *x.IfFamily
	}
	return ""
}

func (x *FamilyAccounting) GetIfPackets() uint64 {
	if x != nil && x.IfPackets != nil {
		return *x.IfPackets
	}
	return 0
}

func (x *FamilyAccounting) GetIfOctets() uint64 {
	if x != nil && x.IfOctets != nil {
		return *x.IfOctets
	}
	return 0
}

func (x *FamilyAccounting) GetIfV6Packets() uint64 {
	if x != nil && x.IfV6Packets != nil {
		return *x.IfV6Packets
	}
	return 0
}

func (x *FamilyAccounting) GetIfV6Octets() uint64 {
	if x != nil && x.IfV6Octets != nil {
		return *x.IfV6Octets
	}
	return 0
}

func (x *FamilyAccounting) GetIfMcastPackets() uint64 {
	if x != nil && x.IfMcastPackets != nil {
		return *x.IfMcastPackets
	}
	return 0
}

func (x *FamilyAccounting) GetIfMcastOctets() uint64 {
	if x != nil && x.IfMcastOctets != nil {
		return *x.IfMcastOctets
	}
	return 0
}

// Interface queue statistics
type LogicalInterfaceQueueStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Queue number
	QueueNumber *uint32 `protobuf:"varint,1,opt,name=queue_number,json=queueNumber" json:"queue_number,omitempty"`
	// The total number of packets that have been added to this queue
	Packets *uint64 `protobuf:"varint,2,opt,name=packets" json:"packets,omitempty"`
	// The total number of bytes that have been added to this queue
	Bytes *uint64 `protobuf:"varint,3,opt,name=bytes" json:"bytes,omitempty"`
	// The total number of tail dropped packets
	TailDropPackets *uint64 `protobuf:"varint,4,opt,name=tail_drop_packets,json=tailDropPackets" json:"tail_drop_packets,omitempty"`
	// The total number of rate-limited packets
	RateLimitDropPackets *uint64 `protobuf:"varint,5,opt,name=rate_limit_drop_packets,json=rateLimitDropPackets" json:"rate_limit_drop_packets,omitempty"`
	// The total number of rate-limited bytes
	RateLimitDropBytes *uint64 `protobuf:"varint,6,opt,name=rate_limit_drop_bytes,json=rateLimitDropBytes" json:"rate_limit_drop_bytes,omitempty"`
	// The total number of red-dropped packets
	RedDropPackets *uint64 `protobuf:"varint,7,opt,name=red_drop_packets,json=redDropPackets" json:"red_drop_packets,omitempty"`
	// The total number of red-dropped bytes
	RedDropBytes *uint64 `protobuf:"varint,8,opt,name=red_drop_bytes,json=redDropBytes" json:"red_drop_bytes,omitempty"`
	// Average queue depth, in packets
	AverageBufferOccupancy *uint64 `protobuf:"varint,9,opt,name=average_buffer_occupancy,json=averageBufferOccupancy" json:"average_buffer_occupancy,omitempty"`
	// Current queue depth, in packets
	CurrentBufferOccupancy *uint64 `protobuf:"varint,10,opt,name=current_buffer_occupancy,json=currentBufferOccupancy" json:"current_buffer_occupancy,omitempty"`
	// The max measured queue depth, in packets, across all measurements since boot
	PeakBufferOccupancy *uint64 `protobuf:"varint,11,opt,name=peak_buffer_occupancy,json=peakBufferOccupancy" json:"peak_buffer_occupancy,omitempty"`
	// Allocated buffer size
	AllocatedBufferSize *uint64 `protobuf:"varint,12,opt,name=allocated_buffer_size,json=allocatedBufferSize" json:"allocated_buffer_size,omitempty"`
}

func (x *LogicalInterfaceQueueStats) Reset() {
	*x = LogicalInterfaceQueueStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logical_port_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalInterfaceQueueStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalInterfaceQueueStats) ProtoMessage() {}

func (x *LogicalInterfaceQueueStats) ProtoReflect() protoreflect.Message {
	mi := &file_logical_port_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalInterfaceQueueStats.ProtoReflect.Descriptor instead.
func (*LogicalInterfaceQueueStats) Descriptor() ([]byte, []int) {
	return file_logical_port_proto_rawDescGZIP(), []int{7}
}

func (x *LogicalInterfaceQueueStats) GetQueueNumber() uint32 {
	if x != nil && x.QueueNumber != nil {
		return *x.QueueNumber
	}
	return 0
}

func (x *LogicalInterfaceQueueStats) GetPackets() uint64 {
	if x != nil && x.Packets != nil {
		return *x.Packets
	}
	return 0
}

func (x *LogicalInterfaceQueueStats) GetBytes() uint64 {
	if x != nil && x.Bytes != nil {
		return *x.Bytes
	}
	return 0
}

func (x *LogicalInterfaceQueueStats) GetTailDropPackets() uint64 {
	if x != nil && x.TailDropPackets != nil {
		return *x.TailDropPackets
	}
	return 0
}

func (x *LogicalInterfaceQueueStats) GetRateLimitDropPackets() uint64 {
	if x != nil && x.RateLimitDropPackets != nil {
		return *x.RateLimitDropPackets
	}
	return 0
}

func (x *LogicalInterfaceQueueStats) GetRateLimitDropBytes() uint64 {
	if x != nil && x.RateLimitDropBytes != nil {
		return *x.RateLimitDropBytes
	}
	return 0
}

func (x *LogicalInterfaceQueueStats) GetRedDropPackets() uint64 {
	if x != nil && x.RedDropPackets != nil {
		return *x.RedDropPackets
	}
	return 0
}

func (x *LogicalInterfaceQueueStats) GetRedDropBytes() uint64 {
	if x != nil && x.RedDropBytes != nil {
		return *x.RedDropBytes
	}
	return 0
}

func (x *LogicalInterfaceQueueStats) GetAverageBufferOccupancy() uint64 {
	if x != nil && x.AverageBufferOccupancy != nil {
		return *x.AverageBufferOccupancy
	}
	return 0
}

func (x *LogicalInterfaceQueueStats) GetCurrentBufferOccupancy() uint64 {
	if x != nil && x.CurrentBufferOccupancy != nil {
		return *x.CurrentBufferOccupancy
	}
	return 0
}

func (x *LogicalInterfaceQueueStats) GetPeakBufferOccupancy() uint64 {
	if x != nil && x.PeakBufferOccupancy != nil {
		return *x.PeakBufferOccupancy
	}
	return 0
}

func (x *LogicalInterfaceQueueStats) GetAllocatedBufferSize() uint64 {
	if x != nil && x.AllocatedBufferSize != nil {
		return *x.AllocatedBufferSize
	}
	return 0
}

var file_logical_port_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*LogicalPort)(nil),
		Field:         7,
		Name:          "jnprLogicalInterfaceExt",
		Tag:           "bytes,7,opt,name=jnprLogicalInterfaceExt",
		Filename:      "logical_port.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional LogicalPort jnprLogicalInterfaceExt = 7;
	E_JnprLogicalInterfaceExt = &file_logical_port_proto_extTypes[0]
)

var File_logical_port_proto protoreflect.FileDescriptor

var file_logical_port_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x74, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4b, 0x0a, 0x0b, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x84, 0x05, 0x0a, 0x14, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x0a, 0x07, 0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x06, 0x69, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x10, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0d, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x69, 0x66, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08,
	0x01, 0x52, 0x0b, 0x73, 0x6e, 0x6d, 0x70, 0x49, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2b,
	0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0c, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x35, 0x0a, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69,
	0x67, 0x68, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x68, 0x69, 0x67, 0x68, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x12, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x10, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x11, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0f, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb2, 0x02,
	0x0a, 0x15, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0a, 0x69, 0x66, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02,
	0x18, 0x01, 0x52, 0x09, 0x69, 0x66, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x22, 0x0a,
	0x09, 0x69, 0x66, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x08, 0x69, 0x66, 0x4f, 0x63, 0x74, 0x65, 0x74,
	0x73, 0x12, 0x2f, 0x0a, 0x10, 0x69, 0x66, 0x5f, 0x75, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02,
	0x18, 0x01, 0x52, 0x0e, 0x69, 0x66, 0x55, 0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x2f, 0x0a, 0x10, 0x69, 0x66, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x18, 0x01, 0x52, 0x0e, 0x69, 0x66, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x69, 0x66, 0x5f, 0x66, 0x63, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x69, 0x66, 0x46, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x31, 0x0a, 0x0b, 0x69, 0x66, 0x5f, 0x66, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x69, 0x66, 0x46, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x22, 0xf5, 0x01, 0x0a, 0x14, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0a, 0x69,
	0x66, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x42,
	0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x09, 0x69, 0x66, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x22, 0x0a, 0x09, 0x69, 0x66, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x08, 0x69, 0x66, 0x4f,
	0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x10, 0x69, 0x66, 0x5f, 0x75, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x69, 0x66, 0x55, 0x63, 0x61, 0x73, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x10, 0x69, 0x66, 0x5f, 0x6d, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x69, 0x66, 0x4d, 0x63, 0x61, 0x73, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x0b, 0x69, 0x66, 0x5f, 0x66, 0x61,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x09, 0x69, 0x66, 0x46, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x41, 0x0a, 0x10, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xad, 0x01,
	0x0a, 0x19, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x09, 0x69,
	0x66, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05,
	0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x08, 0x69, 0x66, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12,
	0x22, 0x0a, 0x09, 0x66, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x08, 0x66, 0x63, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0a, 0x69, 0x66, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x09,
	0x69, 0x66, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x09, 0x69, 0x66, 0x5f,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x18, 0x01, 0x52, 0x08, 0x69, 0x66, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x22, 0xb4, 0x02,
	0x0a, 0x10, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x22, 0x0a, 0x09, 0x69, 0x66, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x08, 0x69, 0x66,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x0a, 0x69, 0x66, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18,
	0x01, 0x52, 0x09, 0x69, 0x66, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x09,
	0x69, 0x66, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x08, 0x69, 0x66, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73,
	0x12, 0x29, 0x0a, 0x0d, 0x69, 0x66, 0x5f, 0x76, 0x36, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x0b,
	0x69, 0x66, 0x56, 0x36, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x69,
	0x66, 0x5f, 0x76, 0x36, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x69, 0x66, 0x56, 0x36, 0x4f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x10, 0x69, 0x66, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05,
	0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x69, 0x66, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x0f, 0x69, 0x66, 0x5f, 0x6d, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05,
	0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x69, 0x66, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x22, 0x85, 0x05, 0x0a, 0x1a, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01,
	0x52, 0x0b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05,
	0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1b,
	0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82,
	0x40, 0x02, 0x18, 0x01, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x11, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x74,
	0x61, 0x69, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3c,
	0x0a, 0x17, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x14, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x15,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02,
	0x18, 0x01, 0x52, 0x12, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x72, 0x6f,
	0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x10, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x44, 0x72, 0x6f, 0x70,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x0e, 0x72, 0x65, 0x64, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x18, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x16, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4f, 0x63, 0x63, 0x75,
	0x70, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x18, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x16,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4f, 0x63, 0x63,
	0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x39, 0x0a, 0x15, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x13, 0x70, 0x65,
	0x61, 0x6b, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63,
	0x79, 0x12, 0x39, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x3a, 0x5f, 0x0a, 0x17,
	0x6a, 0x6e, 0x70, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x45, 0x78, 0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65,
	0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x17, 0x6a, 0x6e, 0x70, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x45, 0x78, 0x74,
}

var (
	file_logical_port_proto_rawDescOnce sync.Once
	file_logical_port_proto_rawDescData = file_logical_port_proto_rawDesc
)

func file_logical_port_proto_rawDescGZIP() []byte {
	file_logical_port_proto_rawDescOnce.Do(func() {
		file_logical_port_proto_rawDescData = protoimpl.X.CompressGZIP(file_logical_port_proto_rawDescData)
	})
	return file_logical_port_proto_rawDescData
}

var file_logical_port_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_logical_port_proto_goTypes = []interface{}{
	(*LogicalPort)(nil),                // 0: LogicalPort
	(*LogicalInterfaceInfo)(nil),       // 1: LogicalInterfaceInfo
	(*IngressInterfaceStats)(nil),      // 2: IngressInterfaceStats
	(*EgressInterfaceStats)(nil),       // 3: EgressInterfaceStats
	(*OperationalState)(nil),           // 4: OperationalState
	(*ForwardingClassAccounting)(nil),  // 5: ForwardingClassAccounting
	(*FamilyAccounting)(nil),           // 6: FamilyAccounting
	(*LogicalInterfaceQueueStats)(nil), // 7: logicalInterfaceQueueStats
	(*JuniperNetworksSensors)(nil),     // 8: JuniperNetworksSensors
}
var file_logical_port_proto_depIdxs = []int32{
	1,  // 0: LogicalPort.interface_info:type_name -> LogicalInterfaceInfo
	2,  // 1: LogicalInterfaceInfo.ingress_stats:type_name -> IngressInterfaceStats
	3,  // 2: LogicalInterfaceInfo.egress_stats:type_name -> EgressInterfaceStats
	4,  // 3: LogicalInterfaceInfo.op_state:type_name -> OperationalState
	7,  // 4: LogicalInterfaceInfo.ingress_queue_info:type_name -> logicalInterfaceQueueStats
	7,  // 5: LogicalInterfaceInfo.egress_queue_info:type_name -> logicalInterfaceQueueStats
	5,  // 6: IngressInterfaceStats.if_fc_stats:type_name -> ForwardingClassAccounting
	6,  // 7: IngressInterfaceStats.if_fa_stats:type_name -> FamilyAccounting
	6,  // 8: EgressInterfaceStats.if_fa_stats:type_name -> FamilyAccounting
	8,  // 9: jnprLogicalInterfaceExt:extendee -> JuniperNetworksSensors
	0,  // 10: jnprLogicalInterfaceExt:type_name -> LogicalPort
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	10, // [10:11] is the sub-list for extension type_name
	9,  // [9:10] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_logical_port_proto_init() }
func file_logical_port_proto_init() {
	if File_logical_port_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_logical_port_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logical_port_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalInterfaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logical_port_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressInterfaceStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logical_port_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgressInterfaceStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logical_port_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationalState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logical_port_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardingClassAccounting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logical_port_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyAccounting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logical_port_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalInterfaceQueueStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_logical_port_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_logical_port_proto_goTypes,
		DependencyIndexes: file_logical_port_proto_depIdxs,
		MessageInfos:      file_logical_port_proto_msgTypes,
		ExtensionInfos:    file_logical_port_proto_extTypes,
	}.Build()
	File_logical_port_proto = out.File
	file_logical_port_proto_rawDesc = nil
	file_logical_port_proto_goTypes = nil
	file_logical_port_proto_depIdxs = nil
}
