//
// Copyrights (c) 2015, 2016, Juniper Networks, Inc.
// All rights reserved.
//

//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

//
// Nitin Kumar, Jan 2015
//
// This file defines the messages in Protocol Buffers format used by
// the port sensor. The-top level messages is Port.
//
// Version 1.1
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.2
// source: port.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Top-level message
type Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceStats []*InterfaceInfos `protobuf:"bytes,1,rep,name=interface_stats,json=interfaceStats" json:"interface_stats,omitempty"`
}

func (x *Port) Reset() {
	*x = Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_port_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{0}
}

func (x *Port) GetInterfaceStats() []*InterfaceInfos {
	if x != nil {
		return x.InterfaceStats
	}
	return nil
}

// Interface information
type InterfaceInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface name, e.g., xe-0/0/0
	IfName *string `protobuf:"bytes,1,req,name=if_name,json=ifName" json:"if_name,omitempty"`
	// Time when interface is created
	InitTime *uint64 `protobuf:"varint,2,opt,name=init_time,json=initTime" json:"init_time,omitempty"`
	// Global Index
	SnmpIfIndex *uint32 `protobuf:"varint,3,opt,name=snmp_if_index,json=snmpIfIndex" json:"snmp_if_index,omitempty"`
	// Name of parent for AE interface, if applicable
	ParentAeName *string `protobuf:"bytes,4,opt,name=parent_ae_name,json=parentAeName" json:"parent_ae_name,omitempty"`
	// Egress queue information
	EgressQueueInfo []*QueueStats `protobuf:"bytes,5,rep,name=egress_queue_info,json=egressQueueInfo" json:"egress_queue_info,omitempty"`
	// Ingress queue information
	IngressQueueInfo []*QueueStats `protobuf:"bytes,6,rep,name=ingress_queue_info,json=ingressQueueInfo" json:"ingress_queue_info,omitempty"`
	// Inbound traffic statistics
	IngressStats *InterfaceStats `protobuf:"bytes,7,opt,name=ingress_stats,json=ingressStats" json:"ingress_stats,omitempty"`
	// Outbound traffic statistics
	EgressStats *InterfaceStats `protobuf:"bytes,8,opt,name=egress_stats,json=egressStats" json:"egress_stats,omitempty"`
	// Inbound traffic errors
	IngressErrors *IngressInterfaceErrors `protobuf:"bytes,9,opt,name=ingress_errors,json=ingressErrors" json:"ingress_errors,omitempty"`
	// Interface administration status
	IfAdministrationStatus *string `protobuf:"bytes,10,opt,name=if_administration_status,json=ifAdministrationStatus" json:"if_administration_status,omitempty"`
	// Interface operational status
	IfOperationalStatus *string `protobuf:"bytes,11,opt,name=if_operational_status,json=ifOperationalStatus" json:"if_operational_status,omitempty"`
	// Interface description
	IfDescription *string `protobuf:"bytes,12,opt,name=if_description,json=ifDescription" json:"if_description,omitempty"`
	// Counter: number of carrier transitions on this interface
	IfTransitions *uint64 `protobuf:"varint,13,opt,name=if_transitions,json=ifTransitions" json:"if_transitions,omitempty"`
	// This corresponds to the ifLastChange object in the standard interface MIB
	IfLastChange *uint32 `protobuf:"varint,14,opt,name=ifLastChange" json:"ifLastChange,omitempty"`
	// This corresponds to the ifHighSpeed object in the standard interface MIB
	IfHighSpeed *uint32 `protobuf:"varint,15,opt,name=ifHighSpeed" json:"ifHighSpeed,omitempty"`
	// Outbound traffic errors
	EgressErrors *EgressInterfaceErrors `protobuf:"bytes,16,opt,name=egress_errors,json=egressErrors" json:"egress_errors,omitempty"`
}

func (x *InterfaceInfos) Reset() {
	*x = InterfaceInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceInfos) ProtoMessage() {}

func (x *InterfaceInfos) ProtoReflect() protoreflect.Message {
	mi := &file_port_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceInfos.ProtoReflect.Descriptor instead.
func (*InterfaceInfos) Descriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{1}
}

func (x *InterfaceInfos) GetIfName() string {
	if x != nil && x.IfName != nil {
		return *x.IfName
	}
	return ""
}

func (x *InterfaceInfos) GetInitTime() uint64 {
	if x != nil && x.InitTime != nil {
		return *x.InitTime
	}
	return 0
}

func (x *InterfaceInfos) GetSnmpIfIndex() uint32 {
	if x != nil && x.SnmpIfIndex != nil {
		return *x.SnmpIfIndex
	}
	return 0
}

func (x *InterfaceInfos) GetParentAeName() string {
	if x != nil && x.ParentAeName != nil {
		return *x.ParentAeName
	}
	return ""
}

func (x *InterfaceInfos) GetEgressQueueInfo() []*QueueStats {
	if x != nil {
		return x.EgressQueueInfo
	}
	return nil
}

func (x *InterfaceInfos) GetIngressQueueInfo() []*QueueStats {
	if x != nil {
		return x.IngressQueueInfo
	}
	return nil
}

func (x *InterfaceInfos) GetIngressStats() *InterfaceStats {
	if x != nil {
		return x.IngressStats
	}
	return nil
}

func (x *InterfaceInfos) GetEgressStats() *InterfaceStats {
	if x != nil {
		return x.EgressStats
	}
	return nil
}

func (x *InterfaceInfos) GetIngressErrors() *IngressInterfaceErrors {
	if x != nil {
		return x.IngressErrors
	}
	return nil
}

func (x *InterfaceInfos) GetIfAdministrationStatus() string {
	if x != nil && x.IfAdministrationStatus != nil {
		return *x.IfAdministrationStatus
	}
	return ""
}

func (x *InterfaceInfos) GetIfOperationalStatus() string {
	if x != nil && x.IfOperationalStatus != nil {
		return *x.IfOperationalStatus
	}
	return ""
}

func (x *InterfaceInfos) GetIfDescription() string {
	if x != nil && x.IfDescription != nil {
		return *x.IfDescription
	}
	return ""
}

func (x *InterfaceInfos) GetIfTransitions() uint64 {
	if x != nil && x.IfTransitions != nil {
		return *x.IfTransitions
	}
	return 0
}

func (x *InterfaceInfos) GetIfLastChange() uint32 {
	if x != nil && x.IfLastChange != nil {
		return *x.IfLastChange
	}
	return 0
}

func (x *InterfaceInfos) GetIfHighSpeed() uint32 {
	if x != nil && x.IfHighSpeed != nil {
		return *x.IfHighSpeed
	}
	return 0
}

func (x *InterfaceInfos) GetEgressErrors() *EgressInterfaceErrors {
	if x != nil {
		return x.EgressErrors
	}
	return nil
}

// Interface queue statistics
type QueueStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Queue number
	QueueNumber *uint32 `protobuf:"varint,1,opt,name=queue_number,json=queueNumber" json:"queue_number,omitempty"`
	// The total number of packets that have been added to this queue
	Packets *uint64 `protobuf:"varint,2,opt,name=packets" json:"packets,omitempty"`
	// The total number of bytes that have been added to this queue
	Bytes *uint64 `protobuf:"varint,3,opt,name=bytes" json:"bytes,omitempty"`
	// The total number of tail dropped packets
	TailDropPackets *uint64 `protobuf:"varint,4,opt,name=tail_drop_packets,json=tailDropPackets" json:"tail_drop_packets,omitempty"`
	// The total number of rate-limited packets
	RlDropPackets *uint64 `protobuf:"varint,5,opt,name=rl_drop_packets,json=rlDropPackets" json:"rl_drop_packets,omitempty"`
	// The total number of rate-limited bytes
	RlDropBytes *uint64 `protobuf:"varint,6,opt,name=rl_drop_bytes,json=rlDropBytes" json:"rl_drop_bytes,omitempty"`
	// The total number of red-dropped packets
	RedDropPackets *uint64 `protobuf:"varint,7,opt,name=red_drop_packets,json=redDropPackets" json:"red_drop_packets,omitempty"`
	// The total number of red-dropped bytes
	RedDropBytes *uint64 `protobuf:"varint,8,opt,name=red_drop_bytes,json=redDropBytes" json:"red_drop_bytes,omitempty"`
	// Average queue depth, in packets
	AvgBufferOccupancy *uint64 `protobuf:"varint,9,opt,name=avg_buffer_occupancy,json=avgBufferOccupancy" json:"avg_buffer_occupancy,omitempty"`
	// Current queue depth, in packets
	CurBufferOccupancy *uint64 `protobuf:"varint,10,opt,name=cur_buffer_occupancy,json=curBufferOccupancy" json:"cur_buffer_occupancy,omitempty"`
	// The max measured queue depth, in packets, across all measurements since boot
	PeakBufferOccupancy *uint64 `protobuf:"varint,11,opt,name=peak_buffer_occupancy,json=peakBufferOccupancy" json:"peak_buffer_occupancy,omitempty"`
	// Allocated buffer size
	AllocatedBufferSize *uint64 `protobuf:"varint,12,opt,name=allocated_buffer_size,json=allocatedBufferSize" json:"allocated_buffer_size,omitempty"`
}

func (x *QueueStats) Reset() {
	*x = QueueStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueStats) ProtoMessage() {}

func (x *QueueStats) ProtoReflect() protoreflect.Message {
	mi := &file_port_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueStats.ProtoReflect.Descriptor instead.
func (*QueueStats) Descriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{2}
}

func (x *QueueStats) GetQueueNumber() uint32 {
	if x != nil && x.QueueNumber != nil {
		return *x.QueueNumber
	}
	return 0
}

func (x *QueueStats) GetPackets() uint64 {
	if x != nil && x.Packets != nil {
		return *x.Packets
	}
	return 0
}

func (x *QueueStats) GetBytes() uint64 {
	if x != nil && x.Bytes != nil {
		return *x.Bytes
	}
	return 0
}

func (x *QueueStats) GetTailDropPackets() uint64 {
	if x != nil && x.TailDropPackets != nil {
		return *x.TailDropPackets
	}
	return 0
}

func (x *QueueStats) GetRlDropPackets() uint64 {
	if x != nil && x.RlDropPackets != nil {
		return *x.RlDropPackets
	}
	return 0
}

func (x *QueueStats) GetRlDropBytes() uint64 {
	if x != nil && x.RlDropBytes != nil {
		return *x.RlDropBytes
	}
	return 0
}

func (x *QueueStats) GetRedDropPackets() uint64 {
	if x != nil && x.RedDropPackets != nil {
		return *x.RedDropPackets
	}
	return 0
}

func (x *QueueStats) GetRedDropBytes() uint64 {
	if x != nil && x.RedDropBytes != nil {
		return *x.RedDropBytes
	}
	return 0
}

func (x *QueueStats) GetAvgBufferOccupancy() uint64 {
	if x != nil && x.AvgBufferOccupancy != nil {
		return *x.AvgBufferOccupancy
	}
	return 0
}

func (x *QueueStats) GetCurBufferOccupancy() uint64 {
	if x != nil && x.CurBufferOccupancy != nil {
		return *x.CurBufferOccupancy
	}
	return 0
}

func (x *QueueStats) GetPeakBufferOccupancy() uint64 {
	if x != nil && x.PeakBufferOccupancy != nil {
		return *x.PeakBufferOccupancy
	}
	return 0
}

func (x *QueueStats) GetAllocatedBufferSize() uint64 {
	if x != nil && x.AllocatedBufferSize != nil {
		return *x.AllocatedBufferSize
	}
	return 0
}

// Interface statistics
type InterfaceStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total number of packets sent/received by this interface
	IfPkts *uint64 `protobuf:"varint,1,opt,name=if_pkts,json=ifPkts" json:"if_pkts,omitempty"`
	// The total number of bytes sent/received by this interface
	IfOctets *uint64 `protobuf:"varint,2,opt,name=if_octets,json=ifOctets" json:"if_octets,omitempty"`
	// The rate at which packets are sent/received by this interface (in packets/sec)
	If_1SecPkts *uint64 `protobuf:"varint,3,opt,name=if_1sec_pkts,json=if1secPkts" json:"if_1sec_pkts,omitempty"`
	// The rate at which bytes are sent/received by this interface
	If_1SecOctets *uint64 `protobuf:"varint,4,opt,name=if_1sec_octets,json=if1secOctets" json:"if_1sec_octets,omitempty"`
	// Total number of unicast packets sent/received by this interface
	IfUcPkts *uint64 `protobuf:"varint,5,opt,name=if_uc_pkts,json=ifUcPkts" json:"if_uc_pkts,omitempty"`
	// Total number of multicast packets sent/received by this interface
	IfMcPkts *uint64 `protobuf:"varint,6,opt,name=if_mc_pkts,json=ifMcPkts" json:"if_mc_pkts,omitempty"`
	// Total number of broadcast packets sent/received by this interface
	IfBcPkts *uint64 `protobuf:"varint,7,opt,name=if_bc_pkts,json=ifBcPkts" json:"if_bc_pkts,omitempty"`
	// Counter: total no of error packets sent/rcvd by this interface
	IfError *uint64 `protobuf:"varint,8,opt,name=if_error,json=ifError" json:"if_error,omitempty"`
	// Counter: total no of PAUSE packets sent/rcvd by this interface
	IfPausePkts *uint64 `protobuf:"varint,9,opt,name=if_pause_pkts,json=ifPausePkts" json:"if_pause_pkts,omitempty"`
	// Counter: total no of UNKNOWN proto packets sent/rcvd by this interface
	IfUnknownProtoPkts *uint64 `protobuf:"varint,10,opt,name=if_unknown_proto_pkts,json=ifUnknownProtoPkts" json:"if_unknown_proto_pkts,omitempty"`
}

func (x *InterfaceStats) Reset() {
	*x = InterfaceStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceStats) ProtoMessage() {}

func (x *InterfaceStats) ProtoReflect() protoreflect.Message {
	mi := &file_port_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceStats.ProtoReflect.Descriptor instead.
func (*InterfaceStats) Descriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{3}
}

func (x *InterfaceStats) GetIfPkts() uint64 {
	if x != nil && x.IfPkts != nil {
		return *x.IfPkts
	}
	return 0
}

func (x *InterfaceStats) GetIfOctets() uint64 {
	if x != nil && x.IfOctets != nil {
		return *x.IfOctets
	}
	return 0
}

func (x *InterfaceStats) GetIf_1SecPkts() uint64 {
	if x != nil && x.If_1SecPkts != nil {
		return *x.If_1SecPkts
	}
	return 0
}

func (x *InterfaceStats) GetIf_1SecOctets() uint64 {
	if x != nil && x.If_1SecOctets != nil {
		return *x.If_1SecOctets
	}
	return 0
}

func (x *InterfaceStats) GetIfUcPkts() uint64 {
	if x != nil && x.IfUcPkts != nil {
		return *x.IfUcPkts
	}
	return 0
}

func (x *InterfaceStats) GetIfMcPkts() uint64 {
	if x != nil && x.IfMcPkts != nil {
		return *x.IfMcPkts
	}
	return 0
}

func (x *InterfaceStats) GetIfBcPkts() uint64 {
	if x != nil && x.IfBcPkts != nil {
		return *x.IfBcPkts
	}
	return 0
}

func (x *InterfaceStats) GetIfError() uint64 {
	if x != nil && x.IfError != nil {
		return *x.IfError
	}
	return 0
}

func (x *InterfaceStats) GetIfPausePkts() uint64 {
	if x != nil && x.IfPausePkts != nil {
		return *x.IfPausePkts
	}
	return 0
}

func (x *InterfaceStats) GetIfUnknownProtoPkts() uint64 {
	if x != nil && x.IfUnknownProtoPkts != nil {
		return *x.IfUnknownProtoPkts
	}
	return 0
}

// Inbound traffic error statistics
type IngressInterfaceErrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of packets that contained errors
	IfErrors *uint64 `protobuf:"varint,1,opt,name=if_errors,json=ifErrors" json:"if_errors,omitempty"`
	// The number of packets dropped by the input queue of the I/O Manager ASIC
	IfInQdrops *uint64 `protobuf:"varint,2,opt,name=if_in_qdrops,json=ifInQdrops" json:"if_in_qdrops,omitempty"`
	// The number of packets which were misaligned
	IfInFrameErrors *uint64 `protobuf:"varint,3,opt,name=if_in_frame_errors,json=ifInFrameErrors" json:"if_in_frame_errors,omitempty"`
	// The number of non-error packets which were chosen to be discarded
	IfDiscards *uint64 `protobuf:"varint,4,opt,name=if_discards,json=ifDiscards" json:"if_discards,omitempty"`
	// The number of runt packets
	IfInRunts *uint64 `protobuf:"varint,5,opt,name=if_in_runts,json=ifInRunts" json:"if_in_runts,omitempty"`
	// The number of packets that fail Layer 3 sanity checks of the header
	IfInL3Incompletes *uint64 `protobuf:"varint,6,opt,name=if_in_l3_incompletes,json=ifInL3Incompletes" json:"if_in_l3_incompletes,omitempty"`
	// The number of packets for which the software could not find a valid logical interface
	IfInL2ChanErrors *uint64 `protobuf:"varint,7,opt,name=if_in_l2chan_errors,json=ifInL2chanErrors" json:"if_in_l2chan_errors,omitempty"`
	// The number of malform or short packets
	IfInL2MismatchTimeouts *uint64 `protobuf:"varint,8,opt,name=if_in_l2_mismatch_timeouts,json=ifInL2MismatchTimeouts" json:"if_in_l2_mismatch_timeouts,omitempty"`
	// The number of FIFO errors
	IfInFifoErrors *uint64 `protobuf:"varint,9,opt,name=if_in_fifo_errors,json=ifInFifoErrors" json:"if_in_fifo_errors,omitempty"`
	// The number of resource errors
	IfInResourceErrors *uint64 `protobuf:"varint,10,opt,name=if_in_resource_errors,json=ifInResourceErrors" json:"if_in_resource_errors,omitempty"`
}

func (x *IngressInterfaceErrors) Reset() {
	*x = IngressInterfaceErrors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressInterfaceErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressInterfaceErrors) ProtoMessage() {}

func (x *IngressInterfaceErrors) ProtoReflect() protoreflect.Message {
	mi := &file_port_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressInterfaceErrors.ProtoReflect.Descriptor instead.
func (*IngressInterfaceErrors) Descriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{4}
}

func (x *IngressInterfaceErrors) GetIfErrors() uint64 {
	if x != nil && x.IfErrors != nil {
		return *x.IfErrors
	}
	return 0
}

func (x *IngressInterfaceErrors) GetIfInQdrops() uint64 {
	if x != nil && x.IfInQdrops != nil {
		return *x.IfInQdrops
	}
	return 0
}

func (x *IngressInterfaceErrors) GetIfInFrameErrors() uint64 {
	if x != nil && x.IfInFrameErrors != nil {
		return *x.IfInFrameErrors
	}
	return 0
}

func (x *IngressInterfaceErrors) GetIfDiscards() uint64 {
	if x != nil && x.IfDiscards != nil {
		return *x.IfDiscards
	}
	return 0
}

func (x *IngressInterfaceErrors) GetIfInRunts() uint64 {
	if x != nil && x.IfInRunts != nil {
		return *x.IfInRunts
	}
	return 0
}

func (x *IngressInterfaceErrors) GetIfInL3Incompletes() uint64 {
	if x != nil && x.IfInL3Incompletes != nil {
		return *x.IfInL3Incompletes
	}
	return 0
}

func (x *IngressInterfaceErrors) GetIfInL2ChanErrors() uint64 {
	if x != nil && x.IfInL2ChanErrors != nil {
		return *x.IfInL2ChanErrors
	}
	return 0
}

func (x *IngressInterfaceErrors) GetIfInL2MismatchTimeouts() uint64 {
	if x != nil && x.IfInL2MismatchTimeouts != nil {
		return *x.IfInL2MismatchTimeouts
	}
	return 0
}

func (x *IngressInterfaceErrors) GetIfInFifoErrors() uint64 {
	if x != nil && x.IfInFifoErrors != nil {
		return *x.IfInFifoErrors
	}
	return 0
}

func (x *IngressInterfaceErrors) GetIfInResourceErrors() uint64 {
	if x != nil && x.IfInResourceErrors != nil {
		return *x.IfInResourceErrors
	}
	return 0
}

// Outbound traffic error statistics
type EgressInterfaceErrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of packets that contained errors
	IfErrors *uint64 `protobuf:"varint,1,opt,name=if_errors,json=ifErrors" json:"if_errors,omitempty"`
	// The number of non-error packets which were chosen to be discarded
	IfDiscards *uint64 `protobuf:"varint,2,opt,name=if_discards,json=ifDiscards" json:"if_discards,omitempty"`
}

func (x *EgressInterfaceErrors) Reset() {
	*x = EgressInterfaceErrors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgressInterfaceErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgressInterfaceErrors) ProtoMessage() {}

func (x *EgressInterfaceErrors) ProtoReflect() protoreflect.Message {
	mi := &file_port_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgressInterfaceErrors.ProtoReflect.Descriptor instead.
func (*EgressInterfaceErrors) Descriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{5}
}

func (x *EgressInterfaceErrors) GetIfErrors() uint64 {
	if x != nil && x.IfErrors != nil {
		return *x.IfErrors
	}
	return 0
}

func (x *EgressInterfaceErrors) GetIfDiscards() uint64 {
	if x != nil && x.IfDiscards != nil {
		return *x.IfDiscards
	}
	return 0
}

var file_port_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*Port)(nil),
		Field:         3,
		Name:          "jnpr_interface_ext",
		Tag:           "bytes,3,opt,name=jnpr_interface_ext",
		Filename:      "port.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional Port jnpr_interface_ext = 3;
	E_JnprInterfaceExt = &file_port_proto_extTypes[0]
)

var File_port_proto protoreflect.FileDescriptor

var file_port_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x40, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x0f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x22, 0xfb, 0x05, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x07, 0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x06,
	0x69, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x69, 0x66, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x6e, 0x6d, 0x70,
	0x49, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a,
	0x11, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x12, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x10, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x34, 0x0a, 0x0d, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0c, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0d, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x69,
	0x66, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69,
	0x66, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x66, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x66, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x66, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x0e, 0x69, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52,
	0x0d, 0x69, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x66, 0x48, 0x69, 0x67, 0x68, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x66, 0x48, 0x69, 0x67, 0x68, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0d, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x45, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x52, 0x0c, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x22, 0xc7, 0x04, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x28, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x07, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02,
	0x18, 0x01, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18,
	0x01, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x11, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x74, 0x61, 0x69, 0x6c,
	0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x0f, 0x72,
	0x6c, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x72, 0x6c, 0x44,
	0x72, 0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x0d, 0x72, 0x6c,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x72, 0x6c, 0x44, 0x72, 0x6f, 0x70,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x10, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x0e, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05,
	0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x14, 0x61, 0x76, 0x67, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x12, 0x61, 0x76, 0x67, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x37, 0x0a, 0x14,
	0x63, 0x75, 0x72, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70,
	0x61, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20,
	0x01, 0x52, 0x12, 0x63, 0x75, 0x72, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4f, 0x63, 0x63, 0x75,
	0x70, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x39, 0x0a, 0x15, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x13, 0x70, 0x65, 0x61,
	0x6b, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79,
	0x12, 0x39, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa0, 0x03, 0x0a, 0x0e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1e,
	0x0a, 0x07, 0x69, 0x66, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x06, 0x69, 0x66, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x22,
	0x0a, 0x09, 0x69, 0x66, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x08, 0x69, 0x66, 0x4f, 0x63, 0x74, 0x65,
	0x74, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x69, 0x66, 0x5f, 0x31, 0x73, 0x65, 0x63, 0x5f, 0x70, 0x6b,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52,
	0x0a, 0x69, 0x66, 0x31, 0x73, 0x65, 0x63, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x0e, 0x69,
	0x66, 0x5f, 0x31, 0x73, 0x65, 0x63, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x0c, 0x69, 0x66, 0x31, 0x73,
	0x65, 0x63, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x69, 0x66, 0x5f, 0x75,
	0x63, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x18, 0x01, 0x52, 0x08, 0x69, 0x66, 0x55, 0x63, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x23, 0x0a,
	0x0a, 0x69, 0x66, 0x5f, 0x6d, 0x63, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x08, 0x69, 0x66, 0x4d, 0x63, 0x50, 0x6b,
	0x74, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x69, 0x66, 0x5f, 0x62, 0x63, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x08, 0x69,
	0x66, 0x42, 0x63, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x08, 0x69, 0x66, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01,
	0x52, 0x07, 0x69, 0x66, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x0d, 0x69, 0x66, 0x5f,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x69, 0x66, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x50, 0x6b, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x15, 0x69, 0x66, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x12, 0x69, 0x66, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x6b, 0x74, 0x73, 0x22, 0x85,
	0x04, 0x0a, 0x16, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x09, 0x69, 0x66, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x18, 0x01, 0x52, 0x08, 0x69, 0x66, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x27, 0x0a,
	0x0c, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x5f, 0x71, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x69, 0x66, 0x49, 0x6e,
	0x51, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x32, 0x0a, 0x12, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x69, 0x66, 0x49, 0x6e, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0b, 0x69, 0x66,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x69, 0x66, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x09,
	0x69, 0x66, 0x49, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x14, 0x69, 0x66, 0x5f,
	0x69, 0x6e, 0x5f, 0x6c, 0x33, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x11,
	0x69, 0x66, 0x49, 0x6e, 0x4c, 0x33, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x73, 0x12, 0x34, 0x0a, 0x13, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x5f, 0x6c, 0x32, 0x63, 0x68, 0x61,
	0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05,
	0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x10, 0x69, 0x66, 0x49, 0x6e, 0x4c, 0x32, 0x63, 0x68, 0x61,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x1a, 0x69, 0x66, 0x5f, 0x69, 0x6e,
	0x5f, 0x6c, 0x32, 0x5f, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02,
	0x18, 0x01, 0x52, 0x16, 0x69, 0x66, 0x49, 0x6e, 0x4c, 0x32, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x11, 0x69, 0x66,
	0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x66, 0x6f, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x69, 0x66,
	0x49, 0x6e, 0x46, 0x69, 0x66, 0x6f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x15,
	0x69, 0x66, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02,
	0x18, 0x01, 0x52, 0x12, 0x69, 0x66, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x63, 0x0a, 0x15, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x22, 0x0a, 0x09, 0x69, 0x66, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52, 0x08, 0x69, 0x66, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0b, 0x69, 0x66, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x82, 0x40, 0x02, 0x18, 0x01, 0x52,
	0x0a, 0x69, 0x66, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x3a, 0x4c, 0x0a, 0x12, 0x6a,
	0x6e, 0x70, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x10, 0x6a, 0x6e, 0x70, 0x72, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x45, 0x78, 0x74,
}

var (
	file_port_proto_rawDescOnce sync.Once
	file_port_proto_rawDescData = file_port_proto_rawDesc
)

func file_port_proto_rawDescGZIP() []byte {
	file_port_proto_rawDescOnce.Do(func() {
		file_port_proto_rawDescData = protoimpl.X.CompressGZIP(file_port_proto_rawDescData)
	})
	return file_port_proto_rawDescData
}

var file_port_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_port_proto_goTypes = []interface{}{
	(*Port)(nil),                   // 0: Port
	(*InterfaceInfos)(nil),         // 1: InterfaceInfos
	(*QueueStats)(nil),             // 2: QueueStats
	(*InterfaceStats)(nil),         // 3: InterfaceStats
	(*IngressInterfaceErrors)(nil), // 4: IngressInterfaceErrors
	(*EgressInterfaceErrors)(nil),  // 5: EgressInterfaceErrors
	(*JuniperNetworksSensors)(nil), // 6: JuniperNetworksSensors
}
var file_port_proto_depIdxs = []int32{
	1, // 0: Port.interface_stats:type_name -> InterfaceInfos
	2, // 1: InterfaceInfos.egress_queue_info:type_name -> QueueStats
	2, // 2: InterfaceInfos.ingress_queue_info:type_name -> QueueStats
	3, // 3: InterfaceInfos.ingress_stats:type_name -> InterfaceStats
	3, // 4: InterfaceInfos.egress_stats:type_name -> InterfaceStats
	4, // 5: InterfaceInfos.ingress_errors:type_name -> IngressInterfaceErrors
	5, // 6: InterfaceInfos.egress_errors:type_name -> EgressInterfaceErrors
	6, // 7: jnpr_interface_ext:extendee -> JuniperNetworksSensors
	0, // 8: jnpr_interface_ext:type_name -> Port
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	8, // [8:9] is the sub-list for extension type_name
	7, // [7:8] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_port_proto_init() }
func file_port_proto_init() {
	if File_port_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_port_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_port_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_port_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_port_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_port_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressInterfaceErrors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_port_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgressInterfaceErrors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_port_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_port_proto_goTypes,
		DependencyIndexes: file_port_proto_depIdxs,
		MessageInfos:      file_port_proto_msgTypes,
		ExtensionInfos:    file_port_proto_extTypes,
	}.Build()
	File_port_proto = out.File
	file_port_proto_rawDesc = nil
	file_port_proto_goTypes = nil
	file_port_proto_depIdxs = nil
}
