//
// Copyrights (c)  2016, Juniper Networks, Inc.
// All rights reserved.
//

//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

//
// Ping Ding, March, 2016
//
// This file defines the messages in Protocol Buffers format used by
// the port sensor. The-top level messages is Port.
//
// Version 1.1
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: optics.proto

package jti

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Top-level message
type Optics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpticsDiag []*OpticsInfos `protobuf:"bytes,1,rep,name=Optics_diag,json=OpticsDiag" json:"Optics_diag,omitempty"`
}

func (x *Optics) Reset() {
	*x = Optics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_optics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optics) ProtoMessage() {}

func (x *Optics) ProtoReflect() protoreflect.Message {
	mi := &file_optics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optics.ProtoReflect.Descriptor instead.
func (*Optics) Descriptor() ([]byte, []int) {
	return file_optics_proto_rawDescGZIP(), []int{0}
}

func (x *Optics) GetOpticsDiag() []*OpticsInfos {
	if x != nil {
		return x.OpticsDiag
	}
	return nil
}

// Optics Interface information
type OpticsInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface name, e.g., xe-0/0/0
	IfName *string `protobuf:"bytes,1,req,name=if_name,json=ifName" json:"if_name,omitempty"`
	// Global Index
	SnmpIfIndex *uint32 `protobuf:"varint,2,opt,name=snmp_if_index,json=snmpIfIndex" json:"snmp_if_index,omitempty"`
	// Optics module Diagnostics statistics
	OpticsDiagStats *OpticsDiagStats `protobuf:"bytes,3,opt,name=optics_diag_stats,json=opticsDiagStats" json:"optics_diag_stats,omitempty"`
}

func (x *OpticsInfos) Reset() {
	*x = OpticsInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_optics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticsInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticsInfos) ProtoMessage() {}

func (x *OpticsInfos) ProtoReflect() protoreflect.Message {
	mi := &file_optics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticsInfos.ProtoReflect.Descriptor instead.
func (*OpticsInfos) Descriptor() ([]byte, []int) {
	return file_optics_proto_rawDescGZIP(), []int{1}
}

func (x *OpticsInfos) GetIfName() string {
	if x != nil && x.IfName != nil {
		return *x.IfName
	}
	return ""
}

func (x *OpticsInfos) GetSnmpIfIndex() uint32 {
	if x != nil && x.SnmpIfIndex != nil {
		return *x.SnmpIfIndex
	}
	return 0
}

func (x *OpticsInfos) GetOpticsDiagStats() *OpticsDiagStats {
	if x != nil {
		return x.OpticsDiagStats
	}
	return nil
}

// Optics Diagnostics stats
type OpticsDiagStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpticsType *uint32 `protobuf:"varint,1,opt,name=optics_type,json=opticsType" json:"optics_type,omitempty"`
	// Module temperature
	ModuleTemp *float64 `protobuf:"fixed64,2,opt,name=module_temp,json=moduleTemp" json:"module_temp,omitempty"`
	// Module temperature threshold information
	ModuleTempHighAlarmThreshold   *float64 `protobuf:"fixed64,3,opt,name=module_temp_high_alarm_threshold,json=moduleTempHighAlarmThreshold" json:"module_temp_high_alarm_threshold,omitempty"`
	ModuleTempLowAlarmThreshold    *float64 `protobuf:"fixed64,4,opt,name=module_temp_low_alarm_threshold,json=moduleTempLowAlarmThreshold" json:"module_temp_low_alarm_threshold,omitempty"`
	ModuleTempHighWarningThreshold *float64 `protobuf:"fixed64,5,opt,name=module_temp_high_warning_threshold,json=moduleTempHighWarningThreshold" json:"module_temp_high_warning_threshold,omitempty"`
	ModuleTempLowWarningThreshold  *float64 `protobuf:"fixed64,6,opt,name=module_temp_low_warning_threshold,json=moduleTempLowWarningThreshold" json:"module_temp_low_warning_threshold,omitempty"`
	// laser output power threshold information
	LaserOutputPowerHighAlarmThresholdDbm   *float64 `protobuf:"fixed64,7,opt,name=laser_output_power_high_alarm_threshold_dbm,json=laserOutputPowerHighAlarmThresholdDbm" json:"laser_output_power_high_alarm_threshold_dbm,omitempty"`
	LaserOutputPowerLowAlarmThresholdDbm    *float64 `protobuf:"fixed64,8,opt,name=laser_output_power_low_alarm_threshold_dbm,json=laserOutputPowerLowAlarmThresholdDbm" json:"laser_output_power_low_alarm_threshold_dbm,omitempty"`
	LaserOutputPowerHighWarningThresholdDbm *float64 `protobuf:"fixed64,9,opt,name=laser_output_power_high_warning_threshold_dbm,json=laserOutputPowerHighWarningThresholdDbm" json:"laser_output_power_high_warning_threshold_dbm,omitempty"`
	LaserOutputPowerLowWarningThresholdDbm  *float64 `protobuf:"fixed64,10,opt,name=laser_output_power_low_warning_threshold_dbm,json=laserOutputPowerLowWarningThresholdDbm" json:"laser_output_power_low_warning_threshold_dbm,omitempty"`
	// laser rx power threshold information
	LaserRxPowerHighAlarmThresholdDbm   *float64 `protobuf:"fixed64,11,opt,name=laser_rx_power_high_alarm_threshold_dbm,json=laserRxPowerHighAlarmThresholdDbm" json:"laser_rx_power_high_alarm_threshold_dbm,omitempty"`
	LaserRxPowerLowAlarmThresholdDbm    *float64 `protobuf:"fixed64,12,opt,name=laser_rx_power_low_alarm_threshold_dbm,json=laserRxPowerLowAlarmThresholdDbm" json:"laser_rx_power_low_alarm_threshold_dbm,omitempty"`
	LaserRxPowerHighWarningThresholdDbm *float64 `protobuf:"fixed64,13,opt,name=laser_rx_power_high_warning_threshold_dbm,json=laserRxPowerHighWarningThresholdDbm" json:"laser_rx_power_high_warning_threshold_dbm,omitempty"`
	LaserRxPowerLowWarningThresholdDbm  *float64 `protobuf:"fixed64,14,opt,name=laser_rx_power_low_warning_threshold_dbm,json=laserRxPowerLowWarningThresholdDbm" json:"laser_rx_power_low_warning_threshold_dbm,omitempty"`
	// laser bias current threshold information
	LaserBiasCurrentHighAlarmThreshold   *float64 `protobuf:"fixed64,15,opt,name=laser_bias_current_high_alarm_threshold,json=laserBiasCurrentHighAlarmThreshold" json:"laser_bias_current_high_alarm_threshold,omitempty"`
	LaserBiasCurrentLowAlarmThreshold    *float64 `protobuf:"fixed64,16,opt,name=laser_bias_current_low_alarm_threshold,json=laserBiasCurrentLowAlarmThreshold" json:"laser_bias_current_low_alarm_threshold,omitempty"`
	LaserBiasCurrentHighWarningThreshold *float64 `protobuf:"fixed64,17,opt,name=laser_bias_current_high_warning_threshold,json=laserBiasCurrentHighWarningThreshold" json:"laser_bias_current_high_warning_threshold,omitempty"`
	LaserBiasCurrentLowWarningThreshold  *float64 `protobuf:"fixed64,18,opt,name=laser_bias_current_low_warning_threshold,json=laserBiasCurrentLowWarningThreshold" json:"laser_bias_current_low_warning_threshold,omitempty"`
	// Module temperature alarm information
	ModuleTempHighAlarm   *bool `protobuf:"varint,19,opt,name=module_temp_high_alarm,json=moduleTempHighAlarm" json:"module_temp_high_alarm,omitempty"`
	ModuleTempLowAlarm    *bool `protobuf:"varint,20,opt,name=module_temp_low_alarm,json=moduleTempLowAlarm" json:"module_temp_low_alarm,omitempty"`
	ModuleTempHighWarning *bool `protobuf:"varint,21,opt,name=module_temp_high_warning,json=moduleTempHighWarning" json:"module_temp_high_warning,omitempty"`
	ModuleTempLowWarning  *bool `protobuf:"varint,22,opt,name=module_temp_low_warning,json=moduleTempLowWarning" json:"module_temp_low_warning,omitempty"`
	// Optics module lane Diagnostics statistics
	OpticsLaneDiagStats []*OpticsDiagLaneStats `protobuf:"bytes,23,rep,name=optics_lane_diag_stats,json=opticsLaneDiagStats" json:"optics_lane_diag_stats,omitempty"`
	WavelengthChannel   *string                `protobuf:"bytes,24,opt,name=wavelength_channel,json=wavelengthChannel" json:"wavelength_channel,omitempty"`
	WavelengthSetpoint  *string                `protobuf:"bytes,25,opt,name=wavelength_setpoint,json=wavelengthSetpoint" json:"wavelength_setpoint,omitempty"`
	TxDither            *string                `protobuf:"bytes,26,opt,name=tx_dither,json=txDither" json:"tx_dither,omitempty"`
	FrequencyError      *string                `protobuf:"bytes,27,opt,name=frequency_error,json=frequencyError" json:"frequency_error,omitempty"`
	WavelengthError     *string                `protobuf:"bytes,28,opt,name=wavelength_error,json=wavelengthError" json:"wavelength_error,omitempty"`
	TecFault            *string                `protobuf:"bytes,29,opt,name=tec_fault,json=tecFault" json:"tec_fault,omitempty"`
	WUnlockedAlarm      *string                `protobuf:"bytes,30,opt,name=w_unlocked_alarm,json=wUnlockedAlarm" json:"w_unlocked_alarm,omitempty"`
	TxTuneAlarm         *string                `protobuf:"bytes,31,opt,name=tx_tune_alarm,json=txTuneAlarm" json:"tx_tune_alarm,omitempty"`
}

func (x *OpticsDiagStats) Reset() {
	*x = OpticsDiagStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_optics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticsDiagStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticsDiagStats) ProtoMessage() {}

func (x *OpticsDiagStats) ProtoReflect() protoreflect.Message {
	mi := &file_optics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticsDiagStats.ProtoReflect.Descriptor instead.
func (*OpticsDiagStats) Descriptor() ([]byte, []int) {
	return file_optics_proto_rawDescGZIP(), []int{2}
}

func (x *OpticsDiagStats) GetOpticsType() uint32 {
	if x != nil && x.OpticsType != nil {
		return *x.OpticsType
	}
	return 0
}

func (x *OpticsDiagStats) GetModuleTemp() float64 {
	if x != nil && x.ModuleTemp != nil {
		return *x.ModuleTemp
	}
	return 0
}

func (x *OpticsDiagStats) GetModuleTempHighAlarmThreshold() float64 {
	if x != nil && x.ModuleTempHighAlarmThreshold != nil {
		return *x.ModuleTempHighAlarmThreshold
	}
	return 0
}

func (x *OpticsDiagStats) GetModuleTempLowAlarmThreshold() float64 {
	if x != nil && x.ModuleTempLowAlarmThreshold != nil {
		return *x.ModuleTempLowAlarmThreshold
	}
	return 0
}

func (x *OpticsDiagStats) GetModuleTempHighWarningThreshold() float64 {
	if x != nil && x.ModuleTempHighWarningThreshold != nil {
		return *x.ModuleTempHighWarningThreshold
	}
	return 0
}

func (x *OpticsDiagStats) GetModuleTempLowWarningThreshold() float64 {
	if x != nil && x.ModuleTempLowWarningThreshold != nil {
		return *x.ModuleTempLowWarningThreshold
	}
	return 0
}

func (x *OpticsDiagStats) GetLaserOutputPowerHighAlarmThresholdDbm() float64 {
	if x != nil && x.LaserOutputPowerHighAlarmThresholdDbm != nil {
		return *x.LaserOutputPowerHighAlarmThresholdDbm
	}
	return 0
}

func (x *OpticsDiagStats) GetLaserOutputPowerLowAlarmThresholdDbm() float64 {
	if x != nil && x.LaserOutputPowerLowAlarmThresholdDbm != nil {
		return *x.LaserOutputPowerLowAlarmThresholdDbm
	}
	return 0
}

func (x *OpticsDiagStats) GetLaserOutputPowerHighWarningThresholdDbm() float64 {
	if x != nil && x.LaserOutputPowerHighWarningThresholdDbm != nil {
		return *x.LaserOutputPowerHighWarningThresholdDbm
	}
	return 0
}

func (x *OpticsDiagStats) GetLaserOutputPowerLowWarningThresholdDbm() float64 {
	if x != nil && x.LaserOutputPowerLowWarningThresholdDbm != nil {
		return *x.LaserOutputPowerLowWarningThresholdDbm
	}
	return 0
}

func (x *OpticsDiagStats) GetLaserRxPowerHighAlarmThresholdDbm() float64 {
	if x != nil && x.LaserRxPowerHighAlarmThresholdDbm != nil {
		return *x.LaserRxPowerHighAlarmThresholdDbm
	}
	return 0
}

func (x *OpticsDiagStats) GetLaserRxPowerLowAlarmThresholdDbm() float64 {
	if x != nil && x.LaserRxPowerLowAlarmThresholdDbm != nil {
		return *x.LaserRxPowerLowAlarmThresholdDbm
	}
	return 0
}

func (x *OpticsDiagStats) GetLaserRxPowerHighWarningThresholdDbm() float64 {
	if x != nil && x.LaserRxPowerHighWarningThresholdDbm != nil {
		return *x.LaserRxPowerHighWarningThresholdDbm
	}
	return 0
}

func (x *OpticsDiagStats) GetLaserRxPowerLowWarningThresholdDbm() float64 {
	if x != nil && x.LaserRxPowerLowWarningThresholdDbm != nil {
		return *x.LaserRxPowerLowWarningThresholdDbm
	}
	return 0
}

func (x *OpticsDiagStats) GetLaserBiasCurrentHighAlarmThreshold() float64 {
	if x != nil && x.LaserBiasCurrentHighAlarmThreshold != nil {
		return *x.LaserBiasCurrentHighAlarmThreshold
	}
	return 0
}

func (x *OpticsDiagStats) GetLaserBiasCurrentLowAlarmThreshold() float64 {
	if x != nil && x.LaserBiasCurrentLowAlarmThreshold != nil {
		return *x.LaserBiasCurrentLowAlarmThreshold
	}
	return 0
}

func (x *OpticsDiagStats) GetLaserBiasCurrentHighWarningThreshold() float64 {
	if x != nil && x.LaserBiasCurrentHighWarningThreshold != nil {
		return *x.LaserBiasCurrentHighWarningThreshold
	}
	return 0
}

func (x *OpticsDiagStats) GetLaserBiasCurrentLowWarningThreshold() float64 {
	if x != nil && x.LaserBiasCurrentLowWarningThreshold != nil {
		return *x.LaserBiasCurrentLowWarningThreshold
	}
	return 0
}

func (x *OpticsDiagStats) GetModuleTempHighAlarm() bool {
	if x != nil && x.ModuleTempHighAlarm != nil {
		return *x.ModuleTempHighAlarm
	}
	return false
}

func (x *OpticsDiagStats) GetModuleTempLowAlarm() bool {
	if x != nil && x.ModuleTempLowAlarm != nil {
		return *x.ModuleTempLowAlarm
	}
	return false
}

func (x *OpticsDiagStats) GetModuleTempHighWarning() bool {
	if x != nil && x.ModuleTempHighWarning != nil {
		return *x.ModuleTempHighWarning
	}
	return false
}

func (x *OpticsDiagStats) GetModuleTempLowWarning() bool {
	if x != nil && x.ModuleTempLowWarning != nil {
		return *x.ModuleTempLowWarning
	}
	return false
}

func (x *OpticsDiagStats) GetOpticsLaneDiagStats() []*OpticsDiagLaneStats {
	if x != nil {
		return x.OpticsLaneDiagStats
	}
	return nil
}

func (x *OpticsDiagStats) GetWavelengthChannel() string {
	if x != nil && x.WavelengthChannel != nil {
		return *x.WavelengthChannel
	}
	return ""
}

func (x *OpticsDiagStats) GetWavelengthSetpoint() string {
	if x != nil && x.WavelengthSetpoint != nil {
		return *x.WavelengthSetpoint
	}
	return ""
}

func (x *OpticsDiagStats) GetTxDither() string {
	if x != nil && x.TxDither != nil {
		return *x.TxDither
	}
	return ""
}

func (x *OpticsDiagStats) GetFrequencyError() string {
	if x != nil && x.FrequencyError != nil {
		return *x.FrequencyError
	}
	return ""
}

func (x *OpticsDiagStats) GetWavelengthError() string {
	if x != nil && x.WavelengthError != nil {
		return *x.WavelengthError
	}
	return ""
}

func (x *OpticsDiagStats) GetTecFault() string {
	if x != nil && x.TecFault != nil {
		return *x.TecFault
	}
	return ""
}

func (x *OpticsDiagStats) GetWUnlockedAlarm() string {
	if x != nil && x.WUnlockedAlarm != nil {
		return *x.WUnlockedAlarm
	}
	return ""
}

func (x *OpticsDiagStats) GetTxTuneAlarm() string {
	if x != nil && x.TxTuneAlarm != nil {
		return *x.TxTuneAlarm
	}
	return ""
}

// Optics Diagnostics lane stats
type OpticsDiagLaneStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaneNumber *uint32 `protobuf:"varint,1,opt,name=lane_number,json=laneNumber" json:"lane_number,omitempty"`
	// lane Module temperature
	LaneLaserTemperature *float64 `protobuf:"fixed64,2,opt,name=lane_laser_temperature,json=laneLaserTemperature" json:"lane_laser_temperature,omitempty"`
	// Laser receive power
	LaneLaserOutputPowerDbm *float32 `protobuf:"fixed32,3,opt,name=lane_laser_output_power_dbm,json=laneLaserOutputPowerDbm" json:"lane_laser_output_power_dbm,omitempty"`
	// Laser transmit power
	LaneLaserReceiverPowerDbm *float32 `protobuf:"fixed32,4,opt,name=lane_laser_receiver_power_dbm,json=laneLaserReceiverPowerDbm" json:"lane_laser_receiver_power_dbm,omitempty"`
	// Laser receive power
	LaneLaserBiasCurrent *float64 `protobuf:"fixed64,5,opt,name=lane_laser_bias_current,json=laneLaserBiasCurrent" json:"lane_laser_bias_current,omitempty"`
	// lane laser output power alarm
	LaneLaserOutputPowerHighAlarm   *bool `protobuf:"varint,6,opt,name=lane_laser_output_power_high_alarm,json=laneLaserOutputPowerHighAlarm" json:"lane_laser_output_power_high_alarm,omitempty"`
	LaneLaserOutputPowerLowAlarm    *bool `protobuf:"varint,7,opt,name=lane_laser_output_power_low_alarm,json=laneLaserOutputPowerLowAlarm" json:"lane_laser_output_power_low_alarm,omitempty"`
	LaneLaserOutputPowerHighWarning *bool `protobuf:"varint,8,opt,name=lane_laser_output_power_high_warning,json=laneLaserOutputPowerHighWarning" json:"lane_laser_output_power_high_warning,omitempty"`
	LaneLaserOutputPowerLowWarning  *bool `protobuf:"varint,9,opt,name=lane_laser_output_power_low_warning,json=laneLaserOutputPowerLowWarning" json:"lane_laser_output_power_low_warning,omitempty"`
	// lane laser receiver power alarm
	LaneLaserReceiverPowerHighAlarm   *bool `protobuf:"varint,10,opt,name=lane_laser_receiver_power_high_alarm,json=laneLaserReceiverPowerHighAlarm" json:"lane_laser_receiver_power_high_alarm,omitempty"`
	LaneLaserReceiverPowerLowAlarm    *bool `protobuf:"varint,11,opt,name=lane_laser_receiver_power_low_alarm,json=laneLaserReceiverPowerLowAlarm" json:"lane_laser_receiver_power_low_alarm,omitempty"`
	LaneLaserReceiverPowerHighWarning *bool `protobuf:"varint,12,opt,name=lane_laser_receiver_power_high_warning,json=laneLaserReceiverPowerHighWarning" json:"lane_laser_receiver_power_high_warning,omitempty"`
	LaneLaserReceiverPowerLowWarning  *bool `protobuf:"varint,13,opt,name=lane_laser_receiver_power_low_warning,json=laneLaserReceiverPowerLowWarning" json:"lane_laser_receiver_power_low_warning,omitempty"`
	// lane laser output power alarm
	LaneLaserBiasCurrentHighAlarm   *bool `protobuf:"varint,14,opt,name=lane_laser_bias_current_high_alarm,json=laneLaserBiasCurrentHighAlarm" json:"lane_laser_bias_current_high_alarm,omitempty"`
	LaneLaserBiasCurrentLowAlarm    *bool `protobuf:"varint,15,opt,name=lane_laser_bias_current_low_alarm,json=laneLaserBiasCurrentLowAlarm" json:"lane_laser_bias_current_low_alarm,omitempty"`
	LaneLaserBiasCurrentHighWarning *bool `protobuf:"varint,16,opt,name=lane_laser_bias_current_high_warning,json=laneLaserBiasCurrentHighWarning" json:"lane_laser_bias_current_high_warning,omitempty"`
	LaneLaserBiasCurrentLowWarning  *bool `protobuf:"varint,17,opt,name=lane_laser_bias_current_low_warning,json=laneLaserBiasCurrentLowWarning" json:"lane_laser_bias_current_low_warning,omitempty"`
	LaneTxLossOfSignalAlarm         *bool `protobuf:"varint,18,opt,name=lane_tx_loss_of_signal_alarm,json=laneTxLossOfSignalAlarm" json:"lane_tx_loss_of_signal_alarm,omitempty"`
	LaneRxLossOfSignalAlarm         *bool `protobuf:"varint,19,opt,name=lane_rx_loss_of_signal_alarm,json=laneRxLossOfSignalAlarm" json:"lane_rx_loss_of_signal_alarm,omitempty"`
	LaneTxLaserDisabledAlarm        *bool `protobuf:"varint,20,opt,name=lane_tx_laser_disabled_alarm,json=laneTxLaserDisabledAlarm" json:"lane_tx_laser_disabled_alarm,omitempty"`
}

func (x *OpticsDiagLaneStats) Reset() {
	*x = OpticsDiagLaneStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_optics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpticsDiagLaneStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpticsDiagLaneStats) ProtoMessage() {}

func (x *OpticsDiagLaneStats) ProtoReflect() protoreflect.Message {
	mi := &file_optics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpticsDiagLaneStats.ProtoReflect.Descriptor instead.
func (*OpticsDiagLaneStats) Descriptor() ([]byte, []int) {
	return file_optics_proto_rawDescGZIP(), []int{3}
}

func (x *OpticsDiagLaneStats) GetLaneNumber() uint32 {
	if x != nil && x.LaneNumber != nil {
		return *x.LaneNumber
	}
	return 0
}

func (x *OpticsDiagLaneStats) GetLaneLaserTemperature() float64 {
	if x != nil && x.LaneLaserTemperature != nil {
		return *x.LaneLaserTemperature
	}
	return 0
}

func (x *OpticsDiagLaneStats) GetLaneLaserOutputPowerDbm() float32 {
	if x != nil && x.LaneLaserOutputPowerDbm != nil {
		return *x.LaneLaserOutputPowerDbm
	}
	return 0
}

func (x *OpticsDiagLaneStats) GetLaneLaserReceiverPowerDbm() float32 {
	if x != nil && x.LaneLaserReceiverPowerDbm != nil {
		return *x.LaneLaserReceiverPowerDbm
	}
	return 0
}

func (x *OpticsDiagLaneStats) GetLaneLaserBiasCurrent() float64 {
	if x != nil && x.LaneLaserBiasCurrent != nil {
		return *x.LaneLaserBiasCurrent
	}
	return 0
}

func (x *OpticsDiagLaneStats) GetLaneLaserOutputPowerHighAlarm() bool {
	if x != nil && x.LaneLaserOutputPowerHighAlarm != nil {
		return *x.LaneLaserOutputPowerHighAlarm
	}
	return false
}

func (x *OpticsDiagLaneStats) GetLaneLaserOutputPowerLowAlarm() bool {
	if x != nil && x.LaneLaserOutputPowerLowAlarm != nil {
		return *x.LaneLaserOutputPowerLowAlarm
	}
	return false
}

func (x *OpticsDiagLaneStats) GetLaneLaserOutputPowerHighWarning() bool {
	if x != nil && x.LaneLaserOutputPowerHighWarning != nil {
		return *x.LaneLaserOutputPowerHighWarning
	}
	return false
}

func (x *OpticsDiagLaneStats) GetLaneLaserOutputPowerLowWarning() bool {
	if x != nil && x.LaneLaserOutputPowerLowWarning != nil {
		return *x.LaneLaserOutputPowerLowWarning
	}
	return false
}

func (x *OpticsDiagLaneStats) GetLaneLaserReceiverPowerHighAlarm() bool {
	if x != nil && x.LaneLaserReceiverPowerHighAlarm != nil {
		return *x.LaneLaserReceiverPowerHighAlarm
	}
	return false
}

func (x *OpticsDiagLaneStats) GetLaneLaserReceiverPowerLowAlarm() bool {
	if x != nil && x.LaneLaserReceiverPowerLowAlarm != nil {
		return *x.LaneLaserReceiverPowerLowAlarm
	}
	return false
}

func (x *OpticsDiagLaneStats) GetLaneLaserReceiverPowerHighWarning() bool {
	if x != nil && x.LaneLaserReceiverPowerHighWarning != nil {
		return *x.LaneLaserReceiverPowerHighWarning
	}
	return false
}

func (x *OpticsDiagLaneStats) GetLaneLaserReceiverPowerLowWarning() bool {
	if x != nil && x.LaneLaserReceiverPowerLowWarning != nil {
		return *x.LaneLaserReceiverPowerLowWarning
	}
	return false
}

func (x *OpticsDiagLaneStats) GetLaneLaserBiasCurrentHighAlarm() bool {
	if x != nil && x.LaneLaserBiasCurrentHighAlarm != nil {
		return *x.LaneLaserBiasCurrentHighAlarm
	}
	return false
}

func (x *OpticsDiagLaneStats) GetLaneLaserBiasCurrentLowAlarm() bool {
	if x != nil && x.LaneLaserBiasCurrentLowAlarm != nil {
		return *x.LaneLaserBiasCurrentLowAlarm
	}
	return false
}

func (x *OpticsDiagLaneStats) GetLaneLaserBiasCurrentHighWarning() bool {
	if x != nil && x.LaneLaserBiasCurrentHighWarning != nil {
		return *x.LaneLaserBiasCurrentHighWarning
	}
	return false
}

func (x *OpticsDiagLaneStats) GetLaneLaserBiasCurrentLowWarning() bool {
	if x != nil && x.LaneLaserBiasCurrentLowWarning != nil {
		return *x.LaneLaserBiasCurrentLowWarning
	}
	return false
}

func (x *OpticsDiagLaneStats) GetLaneTxLossOfSignalAlarm() bool {
	if x != nil && x.LaneTxLossOfSignalAlarm != nil {
		return *x.LaneTxLossOfSignalAlarm
	}
	return false
}

func (x *OpticsDiagLaneStats) GetLaneRxLossOfSignalAlarm() bool {
	if x != nil && x.LaneRxLossOfSignalAlarm != nil {
		return *x.LaneRxLossOfSignalAlarm
	}
	return false
}

func (x *OpticsDiagLaneStats) GetLaneTxLaserDisabledAlarm() bool {
	if x != nil && x.LaneTxLaserDisabledAlarm != nil {
		return *x.LaneTxLaserDisabledAlarm
	}
	return false
}

var file_optics_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*JuniperNetworksSensors)(nil),
		ExtensionType: (*Optics)(nil),
		Field:         10,
		Name:          "jnpr_optics_ext",
		Tag:           "bytes,10,opt,name=jnpr_optics_ext",
		Filename:      "optics.proto",
	},
}

// Extension fields to JuniperNetworksSensors.
var (
	// optional Optics jnpr_optics_ext = 10;
	E_JnprOpticsExt = &file_optics_proto_extTypes[0]
)

var File_optics_proto protoreflect.FileDescriptor

var file_optics_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x37, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2d, 0x0a,
	0x0b, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x52, 0x0a, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x73, 0x44, 0x69, 0x61, 0x67, 0x22, 0x8f, 0x01, 0x0a,
	0x0b, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x07,
	0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x42, 0x05, 0x82,
	0x40, 0x02, 0x08, 0x01, 0x52, 0x06, 0x69, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x6e, 0x6d, 0x70, 0x49, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x3c, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x63, 0x73, 0x44, 0x69, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0f, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x73, 0x44, 0x69, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xed,
	0x10, 0x0a, 0x0f, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x73, 0x44, 0x69, 0x61, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52,
	0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x4d, 0x0a, 0x20, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x1c, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x48, 0x69, 0x67, 0x68, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4b, 0x0a, 0x1f, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x1b, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x4c, 0x6f, 0x77, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x51, 0x0a, 0x22, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x1e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4f, 0x0a, 0x21, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x1d, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x4c, 0x6f, 0x77, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x61, 0x0a, 0x2b, 0x6c,
	0x61, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x62, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x25, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x48, 0x69, 0x67, 0x68, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x44, 0x62, 0x6d, 0x12, 0x5f,
	0x0a, 0x2a, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x62, 0x6d, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x24, 0x6c, 0x61, 0x73, 0x65, 0x72,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x6f, 0x77, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x44, 0x62, 0x6d, 0x12,
	0x65, 0x0a, 0x2d, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x62, 0x6d,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x27, 0x6c,
	0x61, 0x73, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x48,
	0x69, 0x67, 0x68, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x44, 0x62, 0x6d, 0x12, 0x63, 0x0a, 0x2c, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x77,
	0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x64, 0x62, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x20, 0x01, 0x52, 0x26, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x6f, 0x77, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x44, 0x62, 0x6d, 0x12, 0x59, 0x0a, 0x27, 0x6c,
	0x61, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x68, 0x69,
	0x67, 0x68, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x64, 0x62, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x20, 0x01, 0x52, 0x21, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x52, 0x78, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x48, 0x69, 0x67, 0x68, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x44, 0x62, 0x6d, 0x12, 0x57, 0x0a, 0x26, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f,
	0x72, 0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x62, 0x6d,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x20, 0x6c,
	0x61, 0x73, 0x65, 0x72, 0x52, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x6f, 0x77, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x44, 0x62, 0x6d, 0x12,
	0x5d, 0x0a, 0x29, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x62, 0x6d, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x23, 0x6c, 0x61, 0x73, 0x65, 0x72,
	0x52, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x44, 0x62, 0x6d, 0x12, 0x5b,
	0x0a, 0x28, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x62, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x22, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x52, 0x78,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x6f, 0x77, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x44, 0x62, 0x6d, 0x12, 0x5a, 0x0a, 0x27, 0x6c,
	0x61, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x42, 0x05, 0x82, 0x40,
	0x02, 0x20, 0x01, 0x52, 0x22, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x42, 0x69, 0x61, 0x73, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x58, 0x0a, 0x26, 0x6c, 0x61, 0x73, 0x65, 0x72,
	0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f,
	0x77, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x21,
	0x6c, 0x61, 0x73, 0x65, 0x72, 0x42, 0x69, 0x61, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4c, 0x6f, 0x77, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x5e, 0x0a, 0x29, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x24, 0x6c, 0x61, 0x73,
	0x65, 0x72, 0x42, 0x69, 0x61, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67,
	0x68, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x5c, 0x0a, 0x28, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x23, 0x6c, 0x61, 0x73, 0x65,
	0x72, 0x42, 0x69, 0x61, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x77, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x33, 0x0a, 0x16, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x68,
	0x69, 0x67, 0x68, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x48, 0x69, 0x67, 0x68, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x4c,
	0x6f, 0x77, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x35, 0x0a, 0x17, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f,
	0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x4c, 0x6f, 0x77,
	0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x16, 0x6f, 0x70, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x73,
	0x44, 0x69, 0x61, 0x67, 0x4c, 0x61, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x13, 0x6f,
	0x70, 0x74, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x6e, 0x65, 0x44, 0x69, 0x61, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f,
	0x73, 0x65, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x53, 0x65, 0x74, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x64, 0x69, 0x74, 0x68, 0x65, 0x72, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x78, 0x44, 0x69, 0x74, 0x68, 0x65, 0x72, 0x12,
	0x27, 0x0a, 0x0f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x63, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x63, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x77, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x78,
	0x5f, 0x74, 0x75, 0x6e, 0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x78, 0x54, 0x75, 0x6e, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x22, 0x9d,
	0x0b, 0x0a, 0x13, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x73, 0x44, 0x69, 0x61, 0x67, 0x4c, 0x61, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0b, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x82, 0x40, 0x02,
	0x08, 0x01, 0x52, 0x0a, 0x6c, 0x61, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3b,
	0x0a, 0x16, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x05,
	0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x14, 0x6c, 0x61, 0x6e, 0x65, 0x4c, 0x61, 0x73, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x43, 0x0a, 0x1b, 0x6c,
	0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x62, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x17, 0x6c, 0x61, 0x6e, 0x65, 0x4c, 0x61, 0x73,
	0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x62, 0x6d,
	0x12, 0x47, 0x0a, 0x1d, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x62,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x42, 0x05, 0x82, 0x40, 0x02, 0x20, 0x01, 0x52, 0x19,
	0x6c, 0x61, 0x6e, 0x65, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x62, 0x6d, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x6e,
	0x65, 0x5f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6c, 0x61, 0x6e, 0x65,
	0x4c, 0x61, 0x73, 0x65, 0x72, 0x42, 0x69, 0x61, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x49, 0x0a, 0x22, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x67, 0x68,
	0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x6c, 0x61,
	0x6e, 0x65, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x48, 0x69, 0x67, 0x68, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x47, 0x0a, 0x21, 0x6c,
	0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x6c, 0x61, 0x6e, 0x65, 0x4c, 0x61, 0x73, 0x65,
	0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x6f, 0x77, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x12, 0x4d, 0x0a, 0x24, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x61, 0x73,
	0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x68, 0x69, 0x67, 0x68, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1f, 0x6c, 0x61, 0x6e, 0x65, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x23, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x65,
	0x72, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c,
	0x6f, 0x77, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1e, 0x6c, 0x61, 0x6e, 0x65, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x6f, 0x77, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x4d, 0x0a, 0x24, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x68, 0x69,
	0x67, 0x68, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f,
	0x6c, 0x61, 0x6e, 0x65, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x48, 0x69, 0x67, 0x68, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12,
	0x4b, 0x0a, 0x23, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x77,
	0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x6c, 0x61,
	0x6e, 0x65, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x4c, 0x6f, 0x77, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x51, 0x0a, 0x26,
	0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x6c, 0x61,
	0x6e, 0x65, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x4f, 0x0a, 0x25, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x77,
	0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20,
	0x6c, 0x61, 0x6e, 0x65, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x6f, 0x77, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x49, 0x0a, 0x22, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x62,
	0x69, 0x61, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68,
	0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x6c, 0x61,
	0x6e, 0x65, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x42, 0x69, 0x61, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x47, 0x0a, 0x21, 0x6c,
	0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x6c, 0x61, 0x6e, 0x65, 0x4c, 0x61, 0x73, 0x65,
	0x72, 0x42, 0x69, 0x61, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x77, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x12, 0x4d, 0x0a, 0x24, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x61, 0x73,
	0x65, 0x72, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x68, 0x69, 0x67, 0x68, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1f, 0x6c, 0x61, 0x6e, 0x65, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x42, 0x69, 0x61,
	0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x23, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x65,
	0x72, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x6f, 0x77, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1e, 0x6c, 0x61, 0x6e, 0x65, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x42, 0x69, 0x61, 0x73, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x77, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x3d, 0x0a, 0x1c, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x74, 0x78, 0x5f, 0x6c, 0x6f, 0x73, 0x73,
	0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6c, 0x61, 0x6e, 0x65, 0x54, 0x78, 0x4c, 0x6f,
	0x73, 0x73, 0x4f, 0x66, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12,
	0x3d, 0x0a, 0x1c, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x72, 0x78, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f,
	0x6f, 0x66, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6c, 0x61, 0x6e, 0x65, 0x52, 0x78, 0x4c, 0x6f, 0x73,
	0x73, 0x4f, 0x66, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x3e,
	0x0a, 0x1c, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x74, 0x78, 0x5f, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6c, 0x61, 0x6e, 0x65, 0x54, 0x78, 0x4c, 0x61, 0x73, 0x65,
	0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x3a, 0x48,
	0x0a, 0x0f, 0x6a, 0x6e, 0x70, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x78,
	0x74, 0x12, 0x17, 0x2e, 0x4a, 0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0d, 0x6a, 0x6e, 0x70, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x63, 0x73, 0x45, 0x78, 0x74,
}

var (
	file_optics_proto_rawDescOnce sync.Once
	file_optics_proto_rawDescData = file_optics_proto_rawDesc
)

func file_optics_proto_rawDescGZIP() []byte {
	file_optics_proto_rawDescOnce.Do(func() {
		file_optics_proto_rawDescData = protoimpl.X.CompressGZIP(file_optics_proto_rawDescData)
	})
	return file_optics_proto_rawDescData
}

var file_optics_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_optics_proto_goTypes = []interface{}{
	(*Optics)(nil),                 // 0: Optics
	(*OpticsInfos)(nil),            // 1: OpticsInfos
	(*OpticsDiagStats)(nil),        // 2: OpticsDiagStats
	(*OpticsDiagLaneStats)(nil),    // 3: OpticsDiagLaneStats
	(*JuniperNetworksSensors)(nil), // 4: JuniperNetworksSensors
}
var file_optics_proto_depIdxs = []int32{
	1, // 0: Optics.Optics_diag:type_name -> OpticsInfos
	2, // 1: OpticsInfos.optics_diag_stats:type_name -> OpticsDiagStats
	3, // 2: OpticsDiagStats.optics_lane_diag_stats:type_name -> OpticsDiagLaneStats
	4, // 3: jnpr_optics_ext:extendee -> JuniperNetworksSensors
	0, // 4: jnpr_optics_ext:type_name -> Optics
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	4, // [4:5] is the sub-list for extension type_name
	3, // [3:4] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_optics_proto_init() }
func file_optics_proto_init() {
	if File_optics_proto != nil {
		return
	}
	file_telemetry_top_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_optics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_optics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticsInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_optics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticsDiagStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_optics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpticsDiagLaneStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_optics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_optics_proto_goTypes,
		DependencyIndexes: file_optics_proto_depIdxs,
		MessageInfos:      file_optics_proto_msgTypes,
		ExtensionInfos:    file_optics_proto_extTypes,
	}.Build()
	File_optics_proto = out.File
	file_optics_proto_rawDesc = nil
	file_optics_proto_goTypes = nil
	file_optics_proto_depIdxs = nil
}
